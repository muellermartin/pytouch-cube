{"version":3,"sources":["Items/common.ts","Items/ImageItem.tsx","util.ts","Items/TextItem.tsx","Items/LabelItemEditor.tsx","fonts.ts","Pages/FontsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["applyThreshold","ctx","color","threshold","inverted","mask","pixels","getImageData","canvas","width","height","i","data","length","alpha_above_thresh","value","alpha","putImageData","ImageItemEditor","props","Form","Field","Button","content","ImageItem","image","useState","setWidth","imageLoaded","setImageLoaded","imgRef","useRef","canvasRef","useEffect","current","getContext","imgWidth","imgHeight","imageSmoothingEnabled","clearRect","scaledWidth","BUFFER_HEIGHT","drawImage","ref","src","style","display","alt","onLoad","imageRendering","valueOptions","values","map","v","key","text","toUpperCase","substring","defaultFonts","guiFonts","TextItem","font","document","fonts","check","textRect","measureText","minWidth","Math","ceil","console","log","textHeight","fontBoundingBoxAscent","fontBoundingBoxDescent","verticalOffset","fillText","actualBoundingBoxAscent","env","NODE_ENV","moveTo","lineTo","strokeStyle","stroke","TextItemEditor","setData","fontName","setFontName","fontSize","setFontSize","split","size","name","match","exec","parsedSize","parseInt","fontString","fontOptions","useMemo","documentFonts","Set","Array","from","entries","a","family","filter","f","includes","sort","b","al","toLowerCase","bl","Group","widths","Dropdown","selection","search","options","onChange","_","d","toString","Input","type","onKeyDownCapture","e","s","bumpFontSize","onWheel","deltaY","deltaMode","labelPosition","label","Message","header","target","amount","max","AddFontModal","Modal","trigger","Header","Content","LabelItemEditor","Checkbox","toggle","checked","rotated","flippedHorizontal","flippedVertical","min","AllFontCategories","categoryColor","handwriting","serif","monospace","FontsPage","webFonts","setWebFonts","setFonts","fontsPerPage","setFontsPerPage","activePage","setActivePage","setSearch","selected","categories","setCategories","fetch","method","response","json","payload","items","forEach","category","warn","toggleCategory","item","included","filteredFonts","selectedFonts","fontPages","updateSelected","wfs","wf","Segment","attached","loading","placeholder","fluid","Divider","Grid","stretched","columns","Column","className","Table","compact","Body","Row","HeaderCell","onToggle","Cell","verticalAlign","Pagination","boundaryRange","siblingRange","totalPages","onPageChange","Number","valueAsNumber","Label","basic","FontTableRow","variants","title","join","FontPreview","fontVariants","source","files","fontFace","FontFace","load","then","ff","add","featureSettings","delete","fontFamily","itemDefaults","marginTop","marginBottom","marginLeft","marginRight","default_items","App","setItems","error","setError","background","setBackground","foreground","setForeground","labelColor","c","selectedItem","setSelectedItem","updateItem","newItem","Container","Menu","href","process","MenuItem","path","onError","message","float","overflowY","overflowX","padding","boxShadow","flexDirection","alignItems","Popup","on","position","onOpen","onClose","flex","alignSelf","ConnectionCard","useForm","register","handleSubmit","errors","formState","currentPort","setCurrentPort","Object","every","onSerialConnect","onSerialDisconnect","addEventListener","removeEventListener","updatePorts","doConnect","navigator","serial","requestPort","port","getInfo","open","baudRate","Card","floated","onClick","onSubmit","defaultValue","clearable","FontLoader","setLoading","flatMap","Promise","all","Loader","active","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ModeWrapper","STRICT_MODE","React","StrictMode","Fragment","ReactDOM","render","getElementById"],"mappings":"wSAgBaA,EAAiB,SAACC,EAA+BC,EAAiCC,EAAoBC,EAAoBC,GAC3G,qBAAdF,IAA2BA,EAAY,KAGjD,IADA,IAAMG,EAASL,EAAIM,aAAa,EAAG,EAAGN,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,QAC3DC,EAAI,EAAGA,EAAIL,EAAOM,KAAKC,OAAQF,GAAK,EAAG,CAC3C,IAAMG,EAAqBR,EAAOM,KAAKD,EAAE,GAAKR,EACxCY,GAAST,EAAOM,KAAKD,GAAGL,EAAOM,KAAKD,EAAE,GAAGL,EAAOM,KAAKD,EAAE,IAAM,EAO7DK,IAAWX,KAHIS,GAHOC,EAAQZ,MAGkCC,GAG5B,IAAM,EAIhDE,EAAOM,KAAKD,EAAI,GAAKT,EAAM,GAC3BI,EAAOM,KAAKD,EAAI,GAAKT,EAAM,GAC3BI,EAAOM,KAAKD,EAAI,GAAKT,EAAM,GAC3BI,EAAOM,KAAKD,EAAI,GAAMK,EAE1Bf,EAAIgB,aAAaX,EAAQ,EAAG,I,OCvBnBY,EAA4D,SAACC,GAEtE,OACI,mCACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,2CACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,sBAOvBC,EAAsC,SAACL,GAChD,IAAOP,EAAQO,EAARP,KACP,EAAqCO,EAAMP,KAApCT,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,SAAUqB,EAA5B,EAA4BA,MAC5B,EAA0BC,mBAAS,KAAnC,mBAAOjB,EAAP,KAAckB,EAAd,KACA,EAAsCD,oBAAS,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAEMC,EAASC,iBAAyB,MAClCC,EAAYD,iBAA0B,MAuC5C,OAtCAE,qBAAU,WAAO,IAAD,EACNhC,EAAG,UAAG+B,EAAUE,eAAb,aAAG,EAAmBC,WAAW,MAC1C,GAAIlC,GACC6B,EAAOI,SACPN,EAAL,CAEA,IAAMQ,EAAWN,EAAOI,QAAQzB,MAC1B4B,EAAYP,EAAOI,QAAQxB,OAEjCT,EAAIqC,uBAAwB,EAI5BrC,EAAIsC,UAAW,EAAG,EAAGtC,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,QAElD,IAAM8B,EAAcJ,GD/CCK,GC+C2BJ,GAEhD,GAAIG,IAAgB/B,EAMhB,OALAR,EAAIO,OAAOC,MAAQ+B,EACnBvC,EAAIO,OAAOE,ODnDM+B,GCoDjBxC,EAAIsC,UAAW,EAAG,EAAGtC,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,aAElDiB,EAASa,GAIbvC,EAAIyC,UAAUZ,EAAOI,QAAS,EAAG,EAAGM,ED1DfC,IC4DjBhC,GAAS,GAEbT,EAAeC,EAAKkB,EAAMjB,MAAOC,EAAWC,EAAUQ,EAAKP,SAE5D,CAAC2B,EAAWvB,EAAOgB,EAAOtB,EAAWC,EAAUwB,EAAaT,EAAMjB,MAAOU,EAAKP,OAEjF4B,qBAAU,WACNJ,GAAe,KAChB,CAACJ,IAGA,qCACI,qBAAKkB,IAAKb,EAAQc,IAAKnB,EAAOoB,MAAO,CAACC,QAAS,QAASC,IAAI,GAAGC,OAAQ,kBAAInB,GAAe,MAC1F,wBAAQc,IAAKX,EAAWa,MAAO,CAACI,eAAgB,YAAavC,OAAQ,e,qDC5EpEwC,EAAe,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAyBA,EAAOC,KAAI,SAAAC,GAAC,MAAK,CAACC,IAAKD,EAAGtC,MAAOsC,EAAGE,KAAMF,EAAE,GAAGG,cAAcH,EAAEI,UAAU,QCcxHC,EAAe,CAEjB,QACA,aACA,aAGEC,EAAW,CACb,SACA,OACA,gBACA,QACA,WACA,WACA,cACA,aAGSC,EAAoC,SAACzC,GAC9C,MAA0CA,EAAMP,KAAzC2C,EAAP,EAAOA,KAAMM,EAAb,EAAaA,KAAM1D,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,SAC9B,EAA0BsB,mBAAS,KAAnC,mBAAOjB,EAAP,KAAckB,EAAd,KACMK,EAAYD,iBAA0B,MAkE5C,OAhEAE,qBAAU,WAAO,IAAD,EACNhC,EAAG,UAAG+B,EAAUE,eAAb,aAAG,EAAmBC,WAAW,MAC1C,GAAIlC,EAAJ,CAEAA,EAAIqC,uBAAwB,EAG5B,IACI,IAAKwB,SAASC,MAAMC,MAAMH,GAAO,OAErC,SACI,OAIJ5D,EAAIsC,UAAW,EAAG,EAAGtC,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,QAElDT,EAAI4D,KAAOA,EAEX,IAAMI,EAAWhE,EAAIiE,YAAYX,GAC3BY,EAAWC,KAAKC,KAAKJ,EAASxD,OACpC,GAAIR,EAAIO,OAAOC,QAAU0D,EAUjB,OAPAG,QAAQC,IAAIN,EAASxD,MAAO,KAAMA,EAAOR,EAAIO,OAAOC,MAAO0D,EAA3D,WAAyEZ,EAAzE,mBAAwFM,IAExF5D,EAAIO,OAAOC,MAAQ0D,EAEnBlE,EAAIsC,UAAW,EAAG,EAAGtC,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,aAElDiB,EAASwC,GAKjB,IAAMK,EAAaP,EAASQ,sBAAwBR,EAASS,uBAAyBT,EAASS,uBACzFC,GAAkB1E,EAAIO,OAAOE,OAAS8D,GAAc,EAG1DvE,EAAI2E,SAASrB,EAAM,EAAGoB,EAAiBV,EAASY,wBAA0BZ,EAASS,uBAAwBjE,GAEvGA,GAAS,IAEbT,EAAeC,EAAKkB,EAAMjB,MAAOC,GAAW,EAAOgB,EAAMP,KAAKP,MAG1C,gBAAjByE,MAAIC,WACH9E,EAAI+E,OAAO,EAAGL,GACd1E,EAAIgF,OAAOxE,EAAOkE,GAClB1E,EAAI+E,OAAO,EAAGL,EAAiBV,EAASS,wBACxCzE,EAAIgF,OAAOxE,EAAOkE,EAAiBV,EAASS,wBAE5CzE,EAAI+E,OAAO,EAAGL,EAAiBV,EAASQ,sBAAwBR,EAASS,wBACzEzE,EAAIgF,OAAOxE,EAAOkE,EAAiBV,EAASQ,sBAAwBR,EAASS,wBAE7EzE,EAAI+E,OAAO,EAAGL,EAAiBH,GAC/BvE,EAAIgF,OAAOxE,EAAOkE,EAAiBH,GACnCvE,EAAIiF,YAAc,YAClBjF,EAAIkF,cAGT,CAACnD,EAAWvB,EAAO8C,EAAMM,EAAM1D,EAAWC,EAAUe,EAAMjB,MAAOiB,EAAMP,KAAKP,OAI3E,wBAAQsC,IAAKX,EAAWa,MAAO,CAACI,eAAgB,YAAavC,OAAQ,YAIhE0E,EAA0D,SAACjE,GAEpE,IAAOP,EAAiBO,EAAjBP,KAAMyE,EAAWlE,EAAXkE,QACb,EAAgC3D,qBAAhC,mBAAO4D,EAAP,KAAiBC,EAAjB,KACA,EAAgC7D,qBAAhC,mBAAO8D,EAAP,KAAiBC,EAAjB,KAEAxD,qBAAU,WAGN,MAAqBrB,EAAKiD,KAAK6B,MAAM,KAArC,mBAAOC,EAAP,KAAaC,EAAb,KACIN,GAAUC,EAAYK,GAE1B,IAAMC,EAAQ,eAAeC,KAAKH,GAClC,GAAIE,IAAUL,EAAU,CACpB,IAAMO,EAAaC,SAASH,EAAM,IAClCJ,EAAYM,MAGjB,CAACnF,EAAKiD,KAAMyB,EAAUE,IAEzBvD,qBAAU,WACN,GAAIqD,GAAaE,EAAjB,CACA,IAAMS,EAAU,UAAMT,EAAN,cAAoBF,GACjC1E,EAAKiD,OAASoC,GAEjBZ,EAAQ,2BAAIzE,GAAL,IAAWiD,KAAMoC,QACzB,CAACX,EAAUE,EAAU5E,EAAMyE,IAW9B,IAeMa,EAAcC,mBAAQ,WACxB,IAAMC,EAAgB,IAAIC,IAAIC,MAAMC,KAAKzC,SAASC,MAAMyC,WAAWpD,KAAI,mCAAEqD,EAAF,iBAAYA,EAAEC,UAAQC,QAAO,SAAAC,GAAC,OAAKjD,EAASkD,SAASD,OACtH7C,EAAQ,UAAIL,EAAJ,YAAqB0C,IAAeU,MAAK,SAACL,EAAGM,GAAJ,OAAYC,EAA4CP,EAAEQ,cAA1CC,EAAyDH,EAAEE,cAAnDD,EAAKE,GAAM,EAAIF,EAAKE,EAAK,EAAI,EAA1C,IAACF,EAAIE,KACvE,OAAOhE,EAAY,WAAZ,cAAgBa,MACxB,IAEGkC,EAAaE,mBAAQ,2BAASX,EAAT,cAAuBF,KAAY,CAACA,EAAUE,IAEzE,OACI,mCAEI,eAACpE,EAAA,EAAD,CAAMyB,MAAO,CAACsB,SAAU,SAAxB,UACI,eAAC/C,EAAA,EAAK+F,MAAN,CAAYC,OAAO,QAAnB,UACI,eAAChG,EAAA,EAAKC,MAAN,WACI,yCACA,cAACgG,EAAA,EAAD,CAAUC,WAAS,EAACC,QAAM,EAACxG,MAAOuE,EAAUkC,QAAStB,EAAauB,SAAU,SAACC,EAAGC,GAAJ,aAAUpC,EAAW,UAACoC,EAAE5G,aAAH,aAAC,EAAS6G,kBAE/G,eAACxG,EAAA,EAAKC,MAAN,CAAYZ,MAAM,IAAlB,UACI,yCACA,cAACoH,EAAA,EAAD,CAAOC,KAAK,SAAS/G,MAAOyE,EAAUuC,iBAlCc,SAACC,GAC9C,kBAAbxC,IACG,YAAVwC,EAAE1E,IACDmC,GAAY,SAAAwC,GAAC,OAAIC,EAAaD,EAAG,MAChB,cAAVD,EAAE1E,IACTmC,GAAY,SAAAwC,GAAC,OAAIC,EAAaD,GAAI,MAEjC3D,QAAQC,IAAIyD,EAAE1E,OA2BwE6E,QAxB5B,SAACH,GAChE1D,QAAQC,IAAIyD,EAAEI,OAAQJ,EAAEK,WACxB5C,GAAY,SAAAwC,GAAC,OAAIC,EAAaD,EAAGD,EAAEI,OAAS,EAAI,GAAK,OAsBgEE,cAAc,QAAQC,MAAM,aAIrI,cAAC,EAAD,IAEA,cAACC,EAAA,EAAD,CAASjH,QAAS,+BAAO0E,IAAoBwC,OAAO,iBAExD,eAACrH,EAAA,EAAKC,MAAN,WACI,yCACA,cAACwG,EAAA,EAAD,CAAOC,KAAK,OAAO/G,MAAOH,EAAK2C,KAAMkE,SAAU,SAAAO,GAAC,OAAI3C,EAAQ,2BAAIzE,GAAL,IAAW2C,KAAMyE,EAAEU,OAAO3H,qBAOnGmH,EAAe,SAACD,EAAuBU,GAAxB,MACJ,kBAANV,EAAiBA,EAAI7D,KAAKwE,IAAIX,EAAIU,EAAQ,IAE/CE,EAA6B,SAACnB,GAIhC,OACI,eAACoB,EAAA,EAAD,CAAOC,QAAS,cAACzH,EAAA,EAAD,CAAQC,QAAQ,iBAAhC,UACI,cAACuH,EAAA,EAAME,OAAP,2BAEA,cAACF,EAAA,EAAMG,QAAP,+B,SCzMCC,EAAuD,SAAC/H,GAAW,IAAD,EACpEP,EAAiBO,EAAjBP,KAAMyE,EAAWlE,EAAXkE,QAGb,OACI,eAACjE,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,MAAN,UACI,cAAC8H,EAAA,EAAD,CAAUC,QAAM,EAACC,QAASzI,EAAKR,SAAUmI,MAAM,WAAWd,SAAU,SAACC,EAAGC,GAAJ,OAAUtC,EAAQ,YAAC,eAAIzE,GAAN,IAAYR,WAAYuH,EAAE0B,gBAEnH,cAACjI,EAAA,EAAKC,MAAN,UACI,cAAC8H,EAAA,EAAD,CAAUC,QAAM,EAACC,QAASzI,EAAKP,KAAMkI,MAAM,OAAOd,SAAU,SAACC,EAAGC,GAAJ,OAAUtC,EAAQ,YAAC,eAAIzE,GAAN,IAAYP,OAAQsH,EAAE0B,gBAEvG,cAACjI,EAAA,EAAKC,MAAN,UAEI,cAAC8H,EAAA,EAAD,CAAUC,QAAM,EAACC,QAASzI,EAAK0I,QAASf,MAAM,cAElD,eAACnH,EAAA,EAAKC,MAAN,WAEI,6CAGA,cAACD,EAAA,EAAK+F,MAAN,CAAYC,OAAO,QAAnB,SACJ,eAAChG,EAAA,EAAKC,MAAN,WAEI,cAAC8H,EAAA,EAAD,CAAUC,QAAM,EAACC,QAASzI,EAAK2I,kBAAmBhB,MAAM,eACxD,cAACnH,EAAA,EAAKC,MAAN,IAEA,cAAC8H,EAAA,EAAD,CAAUC,QAAM,EAACC,QAASzI,EAAK4I,gBAAiBjB,MAAM,qBAM1D,eAACnH,EAAA,EAAKC,MAAN,WACI,8CACA,cAACwG,EAAA,EAAD,CAAOC,KAAK,QAAQ2B,IAAI,IAAIb,IAAI,MAAM7H,MAAK,UAAEH,EAAKT,iBAAP,QAAoB,IAAKsH,SAAU,SAACC,EAAGC,GAAJ,OAAUtC,EAAQ,YAAC,eAAIzE,GAAN,IAAYT,UAAW6F,SAAS2B,EAAE5G,MAAO,iB,2HCpB3I2I,EAAoC,CAAC,cAAe,aAAc,QAAS,YAAa,WCd/FC,EAAsD,CACxDC,YAAa,SACb,aAAc,OACdC,MAAO,OACPC,UAAW,SACXhH,QAAS,SAGAiH,EAAkF,SAAC5I,GAC5F,IAAQ6I,EAA0B7I,EAA1B6I,SAAUC,EAAgB9I,EAAhB8I,YAElB,EAA0BvI,qBAA1B,mBAAOqC,EAAP,KAAcmG,EAAd,KACA,EAAwCxI,mBAAS,IAAjD,mBAAOyI,EAAP,KAAqBC,EAArB,KACA,EAAoC1I,mBAAS,GAA7C,mBAAO2I,EAAP,KAAmBC,EAAnB,KACA,EAA4B5I,mBAAS,IAArC,mBAAO6F,EAAP,KAAegD,EAAf,KAGMC,EAAWrE,mBAAQ,kBAAM6D,EAAS5G,KAAI,SAAAwD,GAAC,OAAIA,EAAEF,YAAS,CAACsD,IAE7D,EAAoCtI,mBAASgI,GAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAEAzI,qBAAU,WACN,sBAAC,8BAAAwE,EAAA,sEAC0BkE,MAAM,qBAAsB,CAACC,OAAQ,QAD/D,cACSC,EADT,gBAE0BA,EAASC,OAFnC,QAESC,EAFT,QAGWC,MAAMC,SAAQ,SAAArE,GACd8C,EAAkB7C,SAASD,EAAEsE,WAC7B5G,QAAQ6G,KAAR,qDAA2DvE,EAAEF,OAA7D,eAA0EE,EAAEsE,SAA5E,oCAGRhB,EAASa,EAAQC,OARpB,0CAAD,KAUD,IAEH,IAAMI,EAAiB,SAACF,GAAD,OAA+E,SAACxD,EAAD,OJrCjD2D,EAASC,EIqC6CjC,EAAL,EAAKA,QAAL,OJrCjDgC,EIqCiGH,EJrCxFI,IIqCoGjC,EAA3BqB,GJrC/C,SAAAM,GAAK,4BAAQA,EAAMrE,QAAO,SAAAhG,GAAC,OAAIA,IAAM0K,MAAhC,YAA2CC,EAAW,CAACD,GAAQ,UI6CtJE,EAAgBpF,mBAAQ,kBAAM,OAACpC,QAAD,IAACA,IAAS,IAAI4C,QAAO,SAAAC,GAAC,OACrD4D,EAAS3D,SAASD,EAAEF,SACrB+D,EAAW5D,SAASD,EAAEsE,WACtBtE,EAAEF,OAAOO,cAAcJ,SAASU,QACjC,CAACxD,EAAO0G,EAAYlD,EAAQiD,IACzBgB,EAAgBrF,mBAAQ,kBAAM,OAACpC,QAAD,IAACA,IAAS,IAAI4C,QAAO,SAAAC,GAAC,OAAI4D,EAAS3D,SAASD,EAAEF,aAAU,CAAC3C,EAAOyG,IAC9FiB,EAAYtF,mBAAQ,kBAAM/B,KAAKC,KAAKkH,EAAc1K,OAASsJ,KAAe,CAACoB,EAAepB,IAE1FuB,EAAiB,SAAC7H,EAAe2G,GAAhB,OAAsCP,GAAY,SAAA0B,GAAG,4BAAQA,EAAIhF,QAAO,SAAAiF,GAAE,OAAIA,EAAGlF,SAAW7C,EAAK6C,WAA5C,YAAyD8D,EAAW,CAAC3G,GAAQ,SAEzJ,OACI,qCACA,eAACgI,EAAA,EAAD,CAASC,SAAS,MAAMC,SAAUhI,EAAlC,UACQ,8BACI,cAAC8D,EAAA,EAAD,CAAOC,KAAK,OAAOkE,YAAY,kBAAkBC,OAAK,EAAClL,MAAOwG,EAAQE,SAAU,SAACO,GAAD,OAAOuC,EAAUvC,EAAEU,OAAO3H,MAAMkG,oBAEpH,cAACiF,EAAA,EAAD,IACA,8BACI,eAACC,EAAA,EAAD,CAAM/E,OAAO,QAAQgF,WAAS,EAACC,QAAU3C,EAAkB7I,OAAS,EAApE,UACI,cAACsL,EAAA,EAAKG,OAAN,CAAa7L,MAAM,IAAnB,SACA,mDAGHiJ,EAAkBtG,KAAI,SAAA8H,GAAQ,OAC3B,cAACiB,EAAA,EAAKG,OAAN,UACI,cAACnD,EAAA,EAAD,CAAUoD,UAAU,cAAchE,MAAO2C,EAAU7B,QAASoB,EAAW5D,SAASqE,GAAWzD,SAAU2D,EAAeF,MADrGA,cAQ/B,cAACsB,EAAA,EAAD,CAAOV,UAAQ,EAACW,SAAO,EAAvB,SACI,eAACD,EAAA,EAAME,KAAP,WACI,eAACF,EAAA,EAAMG,IAAP,WACI,cAACH,EAAA,EAAMI,WAAP,wBACA,cAACJ,EAAA,EAAMI,WAAP,OAEHpB,EAAc3K,OAAS,EACpB2K,EAAcpI,KAAI,SAAAwD,GAAC,OAAI,cAAC,EAAD,CAA6B4D,SAAUA,EAAS3D,SAASD,EAAEF,QAASmG,SAAU,SAACxD,GAAD,OAAaqC,EAAe9E,GAAG,IAAQ/C,KAAM+C,GAAxGA,EAAEF,WAE5C,eAAC8F,EAAA,EAAMG,IAAP,WACI,cAACH,EAAA,EAAMM,KAAP,IACA,cAACN,EAAA,EAAMM,KAAP,IAEA,cAACN,EAAA,EAAMM,KAAP,gCACA,cAACN,EAAA,EAAMM,KAAP,IACA,cAACN,EAAA,EAAMM,KAAP,OAKR,eAACN,EAAA,EAAMG,IAAP,WACI,cAACH,EAAA,EAAMI,WAAP,UAAmB,SACnB,cAACJ,EAAA,EAAMI,WAAP,OAEH7I,GAASwH,EAAc5E,QAAO,SAACe,EAAG/G,GAAJ,OAAUA,GAAKwJ,GAAgBE,EAAW,IAAM1J,EAAIwJ,EAAeE,KAAYjH,KAAI,SAACwD,EAAGjG,GAAJ,OAC9G,cAAC,EAAD,CAA6B6J,SAAUA,EAAS3D,SAASD,EAAEF,QAASmG,SAAU,SAACxD,GAAD,OAAaqC,EAAe9E,GAAG,IAAO/C,KAAM+C,GAAvGA,EAAEF,gBAOrC,cAACmF,EAAA,EAAD,CAASC,SAAS,SAAlB,SACI,eAACK,EAAA,EAAD,WACI,eAACA,EAAA,EAAKG,OAAN,CAAaS,cAAc,SAAStM,MAAM,KAA1C,UACI,2CAAqB,uBACrB,cAACuM,EAAA,EAAD,CAAYC,cAAe,EAAGC,aAAc,EAAG7C,WAAYA,EAAY8C,WAAY1B,EAAW2B,aAAc,SAAC1F,EAAGC,GAAJ,OAAU2C,EAAc3C,EAAE0C,WAAagD,OAAO1F,EAAE0C,YAAc,SAE9K,cAAC8B,EAAA,EAAKG,OAAN,CAAaS,cAAc,SAAStM,MAAM,IAA1C,SAEI,eAACoH,EAAA,EAAD,CAAQoE,OAAK,EAAC3D,cAAc,QAASR,KAAK,SAAS/G,MAAOoJ,EAAc1C,SAAU,SAACO,EAAGL,GAAJ,OAAUyC,EAAgBpC,EAAEU,OAAO4E,gBAArH,UAEhB,0BACA,eAACC,EAAA,EAAD,CAAOhB,UAAU,gBAAgBiB,OAAK,EAAtC,gBAA0C,iCAASjC,EAAc1K,0BAY/D4M,EAAqG,SAAC,GAAgC,IAA/B5J,EAA8B,EAA9BA,KAAM2G,EAAwB,EAAxBA,SAAUqC,EAAc,EAAdA,SAElH3B,EAA8BrH,EAA9BqH,SAAUxE,EAAoB7C,EAApB6C,OAAQgH,EAAY7J,EAAZ6J,SAEzB,OACI,eAAClB,EAAA,EAAMG,IAAP,WACgB,cAACH,EAAA,EAAMM,KAAP,CAAYrM,MAAM,IAAlB,SACZ,cAAC0I,EAAA,EAAD,CAAUtG,MAAO,GAAIuG,QAAM,EAACC,QAASmB,EAAU/C,SAAU,SAACC,EAAGC,GAAJ,OAAUkF,IAAWlF,EAAE0B,cAEhF,cAACmD,EAAA,EAAMM,KAAP,UAEI,cAAC9D,EAAA,EAAD,UACKtC,MAIT,cAAC8F,EAAA,EAAMM,KAAP,UACA,cAAC,EAAD,CAAanH,KAAK,OAAO9B,KAAMA,MAG/B,cAAC2I,EAAA,EAAMM,KAAP,UAEQ,wBAAOa,MAAOD,EAASE,KAAK,MAA5B,UAAoCF,EAAS7M,OAA7C,mBAEP,cAAC2L,EAAA,EAAMM,KAAP,UACD,cAACS,EAAA,EAAD,CAAOhB,UAAU,cAAchL,QAAS2J,EAAUvF,KAAK,OAAOzF,MAAOyJ,EAAcuB,WAUzF2C,EAAuD,SAAC,GAAkB,IAAjBhK,EAAgB,EAAhBA,KAAM8B,EAAU,EAAVA,KAsBjE,OApBA1D,qBAAU,WACN,IAAM6L,EAAejK,EAAK6J,SAAStK,KAAI,SAAAC,GACnC,IAAM0K,EAASlK,EAAKmK,MAAM3K,GACpB4K,EAAW,IAAIC,SAASrK,EAAK6C,OAAlB,cAAiCqH,EAAjC,MAMjB,OALAzJ,QAAQC,IAAR,wBAA6BV,EAAK6C,OAAlC,cAA8CrD,EAA9C,kBAAyD0K,IACzDE,EAASE,OAAOC,MAAK,SAAAC,GACjB/J,QAAQC,IAAR,kBAAuBV,EAAK6C,OAA5B,sBAAgDrD,EAAhD,MACAS,SAASC,MAAMuK,IAAID,MAEhBJ,KAGX,OAAO,WACHH,EAAa7C,SAAQ,SAAAgD,GACjB3J,QAAQC,IAAR,qBAA0B0J,EAASvH,OAAnC,eAAgDuH,EAASM,gBAAzD,eAA+EN,EAASpL,MAAxF,MACAiB,SAASC,MAAMyK,OAAOP,SAG/B,CAACpK,EAAK6C,OAAQ7C,EAAK6J,SAAU7J,EAAKmK,QAGjC,qBAAKnL,MAAO,CAAC4L,WAAY5K,EAAK6C,OAAQlB,SAAUG,GAAhD,yCCtLF+I,EAAe,CAAEC,UAAW,EAAIC,aAAc,EAAIC,WAAY,EAAIC,YAAa,EAAG5O,MAAO,CAAC,EAAG,EAAG,IAChG6O,GAAiC,CAAC,aACpCzL,IAAK,KAAMwE,KAAM,OAAQvE,KAAM,SAAUM,KAAM,mBAAsB6K,GADlC,aAEnCpL,IAAK,KAAMwE,KAAM,OAAQvE,KAAM,kBAAmBM,KAAM,mBAAsB6K,GAF3C,aAGnCpL,IAAK,KAAMwE,KAAM,QAASrG,MAAO,kBAAqBiN,GAHnB,aAInCpL,IAAK,KAAMwE,KAAM,OAAQvE,KAAM,QAASM,KAAM,mBAAuB6K,IA6G1DM,OA1Gf,WAAgB,IAAD,EAEb,EAA0BtN,mBAA0BqN,IAApD,mBAAO/D,EAAP,KAAciE,EAAd,KACA,EAA0BvN,qBAA1B,mBAAOwN,EAAP,KAAcC,EAAd,KACA,EAAgCzN,mBAAoB,IAApD,mBAAOsI,EAAP,KAAiBC,EAAjB,KAEA,EAAoCvI,mBAAiB,WAArD,mBAAO0N,EAAP,KAAmBC,EAAnB,KACA,EAAoC3N,mBAAiB,WAArD,mBAAO4N,EAAP,KAAmBC,EAAnB,KAEMC,EAAuCrJ,mBAAQ,iBAAY,EAALsJ,EAAoDzJ,SAASsJ,EAAW7L,UAAU,GAAI,MAA1E,GAAM,IAAOgM,GAAK,EAAK,IAAU,IAAJA,GAAzC,IAAAA,IAA4F,CAACH,IAEzJ,EAAwC5N,mBAA+B,MAAvE,mBAAOgO,EAAP,KAAqBC,EAArB,KAEMC,EAAa,SAACC,GAAD,OACjBZ,GAAS,SAAA/M,GAAO,OAAIA,EAAQkB,KAAI,SAAAzC,GAAC,OAAIA,EAAE2C,MAAQuM,EAAQvM,IAAMuM,EAAUlP,SAKzE,OACE,qBAAK4L,UAAU,MAAf,SACE,eAACuD,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAAC,IAAD,CAAMC,KAAI,UAAKC,gBAAL,UAAV,SACE,cAACC,EAAA,EAAD,CAAU3O,QAAQ,YAEpB,cAAC,IAAD,CAAMyO,KAAI,UAAKC,gBAAL,UAAV,SACE,cAACC,EAAA,EAAD,CAAU3O,QAAQ,YAEpB,cAAC,IAAD,CAAMyO,KAAI,UAAKC,gBAAL,YAAV,SACE,cAACC,EAAA,EAAD,CAAU3O,QAAQ,iBAIxB,cAAC,IAAD,CAAO4O,KAAI,UAAKF,gBAAL,YAAX,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAOE,KAAI,UAAKF,gBAAL,UAAX,SACE,cAAC,EAAD,CAAWjG,SAAUA,EAAUC,YAAaA,MAG9C,eAAC,IAAD,CAAOkG,KAAI,UAAKF,gBAAL,UAAX,UACE,cAAC,GAAD,CAAYjG,SAAUA,EAAUoG,QAAS,SAACpI,GAAD,OAAcmH,EAAS,CAACxB,MAAO,qBAAsB0C,QAAO,OAAErI,QAAF,IAAEA,OAAF,EAAEA,EAAGqI,aAI5G,eAACxE,EAAA,EAAD,WACE,eAAC7C,EAAA,EAAD,0BACE,qBAAKnG,MAAO,CAACyN,MAAO,SAApB,SAA8B,wCAC9B,uBAAOxI,KAAK,QAAQ/G,MAAOqO,EAAY3H,SAAU,SAAAO,GAAC,OAAIqH,EAAcrH,EAAEU,OAAO3H,eAE3E,qBAAK8B,MAAO,CAACyN,MAAO,SAApB,SAA8B,wCAChC,uBAAOxI,KAAK,QAAQ/G,MAAOuO,EAAY7H,SAAU,SAAAO,GAAC,OAAIuH,EAAcvH,EAAEU,OAAO3H,kBAKhFmO,GAAU,mCAAQ,iCAASA,EAAMvB,QAAe,wCAAMuB,EAAMmB,eAAZ,QAAwB,qBACzE,qBAAKxN,MAAO,CAAC0N,UAAW,UAAUC,UAAW,OAAQpB,WAAY,OAAQqB,QAAS,OAAQC,UAAW,+BAArG,SACA,sBAAK7N,MAAO,CAACC,QAAS,OAAQ6N,cAAe,MAAOC,WAAY,aAAcxB,WAAYA,EAAY3O,MAAO,cAAeiQ,UAAW,yBAAvI,UAEG1F,EAAM5H,KAAI,SAAAiI,GAAI,OACf,eAACwF,EAAA,EAAD,CAAsBC,GAAG,QAAQC,SAAS,gBAAgBC,OAAQ,kBAAMrB,EAAgBtE,IAAO4F,QAAS,kBAAMtB,EAAgB,OAAO5G,QACnI,sBAAKwD,UAAS,qBAA2B,OAAZmD,QAAY,IAAZA,OAAA,EAAAA,EAAcpM,OAAQ+H,EAAK/H,IAAI,YAAY,IAAxE,UACE,qBAAKiJ,UAAU,cAED,SAAdlB,EAAKvD,KAAkB,cAAC,EAAD,CAAUlH,KAAMyK,EAAMnL,MAAOsP,IACtC,UAAdnE,EAAKvD,KAAmB,cAAC,EAAD,CAAWlH,KAAMyK,EAAOnL,MAAOsP,IACvD,kDANJ,UAUE,cAAC,EAAD,CAAiB5O,KAAMyK,EAAMhG,QAASuK,IACvB,SAAdvE,EAAKvD,MAAmB,cAAC,EAAD,CAAgBlH,KAAMyK,EAAMhG,QAASuK,IAC/C,UAAdvE,EAAKvD,MAAoB,cAAC,EAAD,CAAiBlH,KAAMyK,EAAMhG,QAASuK,MAZtDvE,EAAK/H,QAmBnB,qBAAKT,MAAO,CAACqO,KAAM,OAAQ9B,WAAY,UAAW+B,UAAW,8BA0B7DC,GAAiB,WAAO,IAAD,EAE3B,EAA0DC,cAAlDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAA2BC,EAA7C,EAAgCC,UAAaD,OAC7C,EAAsC9P,qBAAtC,mBAAOgQ,EAAP,KAAoBC,EAApB,KACA,EAA0BjQ,qBAA1B,mBAAOwN,EAAP,KAAcC,EAAd,KAEAlN,qBAAU,WACL2P,OAAOzO,OAAOqO,GAAQK,OAAM,SAAAxO,GAAC,OAAKA,OAEpC,CAACmO,IAEJ,IAAMM,EAAkB,SAAC9J,GACvB1D,QAAQC,IAAR,aAA0ByD,EAAEU,SAGxBqJ,EAAqB,SAAC/J,GAC1B1D,QAAQC,IAAR,gBAA6ByD,EAAEU,SAGjCzG,qBAAU,WACR,GAAIyP,EAGJ,OAFAA,EAAYM,iBAAiB,UAAWF,GACxCJ,EAAYM,iBAAiB,aAAcD,GACpC,WACLL,EAAYO,oBAAoB,UAAWH,GAC3CJ,EAAYO,oBAAoB,aAAcF,MAE/C,CAACL,IAEJ,IAAMQ,EAAW,uCAAG,sBAAAzL,EAAA,0FAAH,qDAyBX0L,EAAS,uCAAG,WAAO3K,GAAP,eAAAf,EAAA,+EAEK2L,UAAUC,OAAOC,cAFtB,cAERC,EAFQ,OAGdjO,QAAQC,IAAI,QAAZ,eAAyBgO,IACzBjO,QAAQC,IAAI,QAASgO,EAAKC,WAC1Bb,EAAeY,GALD,SAMRA,EAAKE,KAAK,CAACC,SAAUlL,EAAQkL,WANrB,OAOdpO,QAAQC,IAAI,sBACZD,QAAQC,IAAI,QAASgO,EAAKC,WARZ,kDAUdlO,QAAQ4K,MAAR,MACAC,EAAS,CAACxB,MAAM,8BAAgC0C,QAAO,OAAC,EAAD,yBAAE,KAAYA,UAXvD,0DAAH,sDAgBf,OACE,eAACsC,EAAA,EAAD,CAAM1G,OAAK,EAAX,UACM,eAAC0G,EAAA,EAAK3J,OAAN,CAAanG,MAAO,CAAC4N,QAAS,QAA9B,UACJ,cAACnP,EAAA,EAAD,CAAQsR,QAAQ,QAAQ1S,MAAM,SAASyF,KAAK,OAAOkN,QAAS,kBAAMX,KAAlE,0BACI,cAAClJ,EAAA,EAAD,CAAQ4J,QAAQ,OAAhB,sCAGA,cAACD,EAAA,EAAK1J,QAAN,UAEJ,eAAC7H,EAAA,EAAD,CAAM0R,SAAUvB,EAAaY,GAA7B,UACA,eAAC/Q,EAAA,EAAK+F,MAAN,CAAYC,OAAO,QAAnB,UACE,eAAChG,EAAA,EAAKC,MAAN,WACA,+CACE,cAACgG,EAAA,EAAD,aAAUC,WAAS,EAACE,QAAStE,EAAa,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,UAAW6P,aAAa,QAAWzB,EAAS,iBAK7J,eAAClQ,EAAA,EAAKC,MAAN,WACA,+CAGE,cAACgG,EAAA,EAAD,aAAUC,WAAS,EAACE,QAAStE,EAAa,IAAI,IAAI,IAAI,IAAI,KAAM6P,aAAa,KAAQzB,EAAS,iBAEhG,eAAClQ,EAAA,EAAKC,MAAN,WACA,kDAGE,cAACgG,EAAA,EAAD,aAAUC,WAAS,EAACE,QAAStE,EAAa,OAAQ,YAAa6P,aAAa,QAAWzB,EAAS,oBAElG,eAAClQ,EAAA,EAAKC,MAAN,WACA,4CAGE,cAACgG,EAAA,EAAD,aAAU2L,WAAS,EAAC1L,WAAS,EAACE,QAAStE,EAAa,OAAO,MAAM,OAAO,OAAO,SAAU6P,aAAa,IAAOzB,EAAS,eAExH,eAAClQ,EAAA,EAAKC,MAAN,WACA,+CAGE,cAACgG,EAAA,EAAD,aAAU2L,WAAS,EAAC1L,WAAS,EAACE,QAAStE,EAAa,IAAK,MAAO,KAAM6P,aAAa,IAAOzB,EAAS,oBAIvG,cAAChQ,EAAA,EAAD,CAAQwG,KAAK,SAASvG,QAAQ,YAE7B2N,GAAU,mCAAQ,iCAASA,EAAMvB,QAAe,wCAAMuB,EAAMmB,eAAZ,QAAwB,8BAYzE4C,GAAiF,SAAC,GAAyB,IAAxBjJ,EAAuB,EAAvBA,SAAUoG,EAAa,EAAbA,QAEjG,EAA8B1O,oBAAS,GAAvC,mBAAOqK,EAAP,KAAgBmH,EAAhB,KA4BA,OA1BAjR,qBAAU,WACN,IAAM6L,EAAe9D,EAASmJ,SAAQ,SAAAtP,GAAI,OAAIA,EAAK6J,SAAStK,KAAI,SAAAC,GAC5D,IAAM0K,EAASlK,EAAKmK,MAAM3K,GACpB4K,EAAW,IAAIC,SAASrK,EAAK6C,OAAlB,cAAiCqH,EAAjC,MAEjB,OADAzJ,QAAQC,IAAR,wBAA6BV,EAAK6C,OAAlC,cAA8CrD,EAA9C,kBAAyD0K,IAClDE,QAaX,OAVAmF,QAAQC,IAAIvF,EAAa1K,IAAb,uCAAiB,WAAMiL,GAAN,SAAA5H,EAAA,+EAEnB4H,EAAGF,OAFgB,OAGzB7J,QAAQC,IAAR,kBAAuB8J,EAAG3H,OAA1B,OACA5C,SAASC,MAAMuK,IAAID,GAJM,gDAMzB+B,EAAQ,EAAD,IANkB,yDAAjB,wDAQRhC,MAAK,kBAAM8E,GAAW,MAEnB,WACHpF,EAAa7C,SAAQ,SAAAgD,GACjB3J,QAAQC,IAAR,qBAA0B0J,EAASvH,OAAnC,eAAgDuH,EAASM,gBAAzD,eAA+EN,EAASpL,MAAxF,MACAiB,SAASC,MAAMyK,OAAOP,SAG/B,CAACjE,EAAUoG,IAGV,cAACkD,EAAA,EAAD,CAAQC,OAAQxH,KCjRPyH,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtF,MAAK,YAAkD,IAA/CuF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHRO,GAA0C,QAA5B/D,gJAAYgE,YAAwBC,IAAMC,WAAaD,IAAME,SAEjFC,IAASC,OACP,cAACN,GAAD,UACE,cAAC,GAAD,MAEFlQ,SAASyQ,eAAe,SAM1Bf,O","file":"static/js/main.2ec1397e.chunk.js","sourcesContent":["import { TextItemData } from \"./TextItem\";\nimport { ImageItemData } from \"./ImageItem\";\n\nexport const BUFFER_HEIGHT = 128;\nexport const PRINT_MARGIN = 30;\nexport const USABLE_HEIGHT = BUFFER_HEIGHT - (PRINT_MARGIN * 2);\n\nexport const color_fg = [0, 0, 0, 255];\nexport const color_bg = [255, 255, 255, 0];\n\n\nexport type LabelItemData = TextItemData | ImageItemData;\n\n\n\n\nexport const applyThreshold = (ctx: CanvasRenderingContext2D, color: [number, number, number], threshold?: number, inverted?: boolean, mask?: boolean) => {\n    if(typeof threshold === 'undefined') threshold = 128;\n\n    const pixels = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    for(let i = 0; i < pixels.data.length; i += 4) {\n        const alpha_above_thresh = pixels.data[i+3] > threshold;\n        const value = (pixels.data[i]+pixels.data[i+1]+pixels.data[i+2]) / 3;\n        const bright_below_thresh = value < threshold;\n\n        // First pass looks at pixel values and checks if they are beneath/above the threshold (depending on invertd)\n        const above_thresh = alpha_above_thresh && bright_below_thresh !== (!!inverted);\n\n        // Second pass inverts the threshold if masking\n        const alpha = (!!mask) !== above_thresh ? 255 : 0;\n\n        // const color = color_fg;\n\n        pixels.data[i + 0] = color[0];\n        pixels.data[i + 1] = color[1];\n        pixels.data[i + 2] = color[2];\n        pixels.data[i + 3] =  alpha; \n    }\n    ctx.putImageData(pixels, 0, 0);\n}\n\n\nexport const getImageDim = (dim: number | SVGAnimatedLength) => typeof dim === 'number' ? dim : dim.baseVal.value;\n\nexport interface ItemProps {\n    color: [number, number, number];\n}\n\nexport interface ItemData {\n    key: string;\n    threshold?: number;\n    inverted?: boolean;\n    mask?: boolean;\n    rotated?: boolean;\n    flippedHorizontal?: boolean;\n    flippedVertical?: boolean;\n    marginTop: number;\n    marginBottom: number;\n    marginLeft: number;\n    marginRight: number;\n}\n\nexport type ItemEditorProps<T> = { data: T, setData: (item: T) => void }","import { useEffect, useRef, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ItemProps, USABLE_HEIGHT, applyThreshold, ItemEditorProps, ItemData } from \"./common\";\n\nexport interface ImageItemData extends ItemData {\n    type: 'image';\n    image: string;\n}\n\nexport interface ImageItemProps extends ItemProps {\n    data: ImageItemData;\n}\n\n\n\nexport const ImageItemEditor: React.FC<ItemEditorProps<ImageItemData>> = (props) => {\n\n    return (\n        <>\n            <Form>\n                <Form.Field>\n                    <label>Image:</label>\n                    <Button content=\"Browse...\" />\n                </Form.Field>\n            </Form>\n        </>\n    )\n}\n\nexport const ImageItem: React.FC<ImageItemProps> = (props) => {\n    const {data} = props;\n    const {threshold, inverted, image} = props.data;\n    const [width, setWidth] = useState(200);\n    const [imageLoaded, setImageLoaded] = useState(false);\n\n    const imgRef = useRef<HTMLImageElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    useEffect(() => {\n        const ctx = canvasRef.current?.getContext('2d');\n        if(!ctx) return;\n        if (!imgRef.current) return;\n        if (!imageLoaded) return;\n\n        const imgWidth = imgRef.current.width;\n        const imgHeight = imgRef.current.height;\n\n        ctx.imageSmoothingEnabled = false;\n        // ctx.globalCompositeOperation\n\n\n        ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        const scaledWidth = imgWidth * (USABLE_HEIGHT / imgHeight);\n\n        if (scaledWidth !== width) {\n            ctx.canvas.width = scaledWidth;\n            ctx.canvas.height = USABLE_HEIGHT;\n            ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            setWidth(scaledWidth);\n            return;\n        }\n\n        ctx.drawImage(imgRef.current, 0, 0, scaledWidth,USABLE_HEIGHT);\n\n        if (width <= 0) return;\n\n        applyThreshold(ctx, props.color, threshold, inverted, data.mask)\n\n    }, [canvasRef, width, image, threshold, inverted, imageLoaded, props.color, data.mask]);\n\n    useEffect(()=> {\n        setImageLoaded(false);\n    }, [image]);\n\n    return (\n        <>\n            <img ref={imgRef} src={image} style={{display: 'none'}} alt=\"\" onLoad={()=>setImageLoaded(true)} />\n            <canvas ref={canvasRef} style={{imageRendering: 'pixelated', height: '140px'}} />\n        </>\n    )\n}","import { StateSetter } from \"./types\";\n\nexport const valueOptions = (...values: string[]) => values.map(v => ({key: v, value: v, text: v[0].toUpperCase()+v.substring(1) }));\n\nexport const updateIncluded = <T>(set: StateSetter<T[]>, item: T, included: boolean) => set(items => [...items.filter(i => i !== item), ...(included ? [item] : [])])","import { env } from \"process\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button, Dropdown, Form, Input, Message, Modal } from \"semantic-ui-react\";\nimport { valueOptions } from \"../util\";\nimport { ItemProps, applyThreshold, ItemEditorProps, ItemData } from \"./common\";\n\n\nexport interface TextItemData extends ItemData {\n    type: 'text';\n    text: string;\n    font: string;\n}\nexport interface TextItemProps extends ItemProps {\n    data: TextItemData;\n}\n\nconst defaultFonts = [\n    // 'otsutome_font'\n    'serif',\n    'sans-serif',\n    'monospace'\n];\n\nconst guiFonts = [\n    'Rating',\n    'Step',\n    'outline-icons',\n    'Icons',\n    'Checkbox',\n    'Dropdown',\n    'brand-icons',\n    'Accordion'\n];\n\nexport const TextItem: React.FC<TextItemProps> = (props) => {\n    const {text, font, threshold, inverted} = props.data;\n    const [width, setWidth] = useState(200);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const ctx = canvasRef.current?.getContext('2d');\n        if(!ctx) return;\n\n        ctx.imageSmoothingEnabled = false;\n        // ctx.globalCompositeOperation\n\n        try {\n            if (!document.fonts.check(font)) return;\n        }\n        catch {\n            return;\n        }\n\n        // ctx.fillStyle = inverted ? 'white' : 'black';\n        ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        ctx.font = font;\n        \n        const textRect = ctx.measureText(text);\n        const minWidth = Math.ceil(textRect.width);\n        if (ctx.canvas.width !== minWidth) {\n            //setTimeout(() => {\n\n                console.log(textRect.width, '!=', width, ctx.canvas.width, minWidth, `(${text}) FONT: ${font}`);\n                \n                ctx.canvas.width = minWidth;\n                // ctx.canvas.height = USABLE_HEIGHT;\n                ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n                \n                setWidth(minWidth);\n                return;\n           // }, 1000);\n        }\n\n        const textHeight = textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent + textRect.fontBoundingBoxDescent;\n        const verticalOffset = (ctx.canvas.height - textHeight) / 2;\n        \n        \n        ctx.fillText(text, 0, verticalOffset + textRect.actualBoundingBoxAscent + textRect.fontBoundingBoxDescent, width);\n\n        if (width <= 0) return;\n\n        applyThreshold(ctx, props.color, threshold, false, props.data.mask);\n\n        \n        if(env.NODE_ENV === 'development') {\n            ctx.moveTo(0, verticalOffset);\n            ctx.lineTo(width, verticalOffset);\n            ctx.moveTo(0, verticalOffset + textRect.fontBoundingBoxDescent);\n            ctx.lineTo(width, verticalOffset + textRect.fontBoundingBoxDescent);\n\n            ctx.moveTo(0, verticalOffset + textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent);\n            ctx.lineTo(width, verticalOffset + textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent);\n\n            ctx.moveTo(0, verticalOffset + textHeight);\n            ctx.lineTo(width, verticalOffset + textHeight);\n            ctx.strokeStyle = \"#ff000030\";\n            ctx.stroke();\n        }\n\n    }, [canvasRef, width, text, font, threshold, inverted, props.color, props.data.mask]);\n\n\n    return (\n        <canvas ref={canvasRef} style={{imageRendering: 'pixelated', height: '140px'}} />\n    )\n}\n\nexport const TextItemEditor: React.FC<ItemEditorProps<TextItemData>> = (props) => {\n\n    const {data, setData} = props;\n    const [fontName, setFontName] = useState<string>();\n    const [fontSize, setFontSize] = useState<number>();\n\n    useEffect(() => {\n        // console.log('Font changed: ', data.font);\n\n        const [size, name] = data.font.split(' ');\n        if(!fontName) setFontName(name);\n\n        const match = /([0-9]+)(.*)/.exec(size);\n        if (match && !fontSize) {\n            const parsedSize = parseInt(match[1]);\n            setFontSize(parsedSize);\n        }\n\n    }, [data.font, fontName, fontSize]);\n\n    useEffect(() => {\n        if(!fontName || !fontSize) return;\n        const fontString = `${fontSize}px ${fontName}`;\n        if(data.font === fontString) return;\n\n        setData({...data, font: fontString});\n    }, [fontName, fontSize, data, setData])\n    \n\n    // const bumpFontSize = (amt: number) => {\n\n    //     if(match && match.length === 3) {\n    //         parts[0] = `${parseInt(match[1]) + amt}${match[2]}`;\n    //         setFont(parts.join(' '));\n    //     }\n    // }\n\n    const handleFontKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        if(typeof fontSize !== 'number') return;\n        if(e.key === 'ArrowUp') {\n            setFontSize(s => bumpFontSize(s, 1));\n        } else if (e.key === 'ArrowDown') {\n            setFontSize(s => bumpFontSize(s, -1));\n        }\n        else console.log(e.key);\n    }\n\n    const handleFontWheel: React.WheelEventHandler<HTMLInputElement> = (e) => {\n        console.log(e.deltaY, e.deltaMode);\n        setFontSize(s => bumpFontSize(s, e.deltaY < 0 ? 1 : -1));\n    }\n\n    const fontOptions = useMemo(() => {\n        const documentFonts = new Set(Array.from(document.fonts.entries()).map(([a, b]) => a.family).filter(f => !guiFonts.includes(f)));\n        const fonts = [...defaultFonts, ...documentFonts].sort((a, b) => ((al, bl) =>  al < bl ? -1 : al > bl ? 1 : 0)(a.toLowerCase(), b.toLowerCase()));\n        return valueOptions(...fonts)\n    }, []);\n\n    const fontString = useMemo(() => `${fontSize}px ${fontName}`, [fontName, fontSize]);\n\n    return (\n        <>\n\n            <Form style={{minWidth: '400px'}}>\n                <Form.Group widths='equal'>\n                    <Form.Field>\n                        <label>Font</label>\n                        <Dropdown selection search value={fontName} options={fontOptions} onChange={(_, d) => setFontName(d.value?.toString()) }  />\n                    </Form.Field>\n                    <Form.Field width='6'>\n                        <label>Size</label>\n                        <Input type='number' value={fontSize} onKeyDownCapture={handleFontKeyDown} onWheel={handleFontWheel} labelPosition=\"right\" label='px' />\n                    </Form.Field>\n\n                </Form.Group>\n                    <AddFontModal />\n\n                    <Message content={<code>{fontString}</code>} header=\"Font string:\" />\n\n                <Form.Field>\n                    <label>Text</label>\n                    <Input type=\"text\" value={data.text} onChange={e => setData({...data, text: e.target.value})} />\n                </Form.Field>\n            </Form>\n        </>\n    )\n}\n\nconst bumpFontSize = (s: number | undefined, amount: number): number | undefined => \n    typeof s !== 'number' ? s : Math.max(s + amount, 1);\n\nconst AddFontModal: React.FC<{}> = (_) => {\n\n\n\n    return (\n        <Modal trigger={<Button content=\"Add new font\" />}>\n            <Modal.Header>Add new font</Modal.Header>\n\n            <Modal.Content>\n                Go to fonts!\n            </Modal.Content>\n\n        </Modal>\n    )\n}\n\n","import React from \"react\";\nimport { Checkbox, Form, Input } from \"semantic-ui-react\";\nimport { ItemData, ItemEditorProps } from \"./common\";\n\n// type GenericItemProps = ItemProps & {type: any, image?: any, text?: any};\n\nexport const LabelItemEditor: React.FC<ItemEditorProps<ItemData>> = (props) => {\n    const {data, setData} = props;\n\n\n    return (\n        <Form>\n            <Form.Field>\n                <Checkbox toggle checked={data.inverted} label=\"Inverted\" onChange={(_, d) => setData(({...data, inverted: !!d.checked}))} />\n            </Form.Field>\n            <Form.Field>\n                <Checkbox toggle checked={data.mask} label=\"Mask\" onChange={(_, d) => setData(({...data, mask: !!d.checked}))} />\n            </Form.Field>\n            <Form.Field>\n\n                <Checkbox toggle checked={data.rotated} label=\"Rotated\" />\n            </Form.Field>\n            <Form.Field>\n\n                <label>Flipped:</label>\n        \n\n                <Form.Group widths='equal'>\n            <Form.Field>\n\n                <Checkbox toggle checked={data.flippedHorizontal} label=\"Horizontal\" />\n                <Form.Field>\n                </Form.Field>\n                <Checkbox toggle checked={data.flippedVertical} label=\"Vertical\" />\n            </Form.Field>\n\n                </Form.Group>\n            </Form.Field>\n\n            <Form.Field>\n                <label>Threshold</label>\n                <Input type=\"range\" min=\"0\" max=\"254\" value={data.threshold ?? 128} onChange={(_, d) => setData(({...data, threshold: parseInt(d.value, 10)}))} />\n            </Form.Field>\n\n        </Form>\n    )\n} \n","\nexport interface WebFontListPayload {\n    kind: 'webfonts#webfontList';\n    items: WebFont[];\n}\nexport interface WebFont {\n    \"kind\": \"webfonts#webfont\",\n    \"family\": string,\n    \"variants\": FontVariant[],\n    \"subsets\": FontSubset[],\n    \"version\": string,\n    \"lastModified\": string,\n    \"files\": Record<FontVariant, string>,\n    category: FontCategory,\n   }\n\n\nexport type FontCategory = 'handwriting' | 'sans-serif' | 'serif' | 'monospace' | 'display';\nexport type FontVariant = \"regular\" | \"italic\" | \"700\" | \"700italic\"\nexport type FontSubset = \"greek\" | \"greek-ext\" | \"cyrillic-ext\" | \"latin-ext\" | \"latin\" | \"cyrillic\"\n\nexport const AllFontCategories: FontCategory[] = ['handwriting', 'sans-serif', 'serif', 'monospace', 'display'];","import { useEffect, useMemo, useState } from \"react\";\nimport { Checkbox, Label, Input, Pagination, Grid, Segment, Table, Header, SemanticCOLORS, SemanticWIDTHSNUMBER, Divider } from \"semantic-ui-react\";\nimport { WebFont, AllFontCategories, WebFontListPayload, FontCategory } from \"../fonts\";\nimport { StateSetter } from \"../types\";\nimport { updateIncluded } from \"../util\";\n\n\nconst categoryColor: Record<FontCategory, SemanticCOLORS> = {\n    handwriting: 'orange',\n    'sans-serif': 'blue', \n    serif: 'pink', \n    monospace: 'violet', \n    display: 'green'\n};\n\nexport const FontsPage: React.FC<{webFonts: WebFont[], setWebFonts: StateSetter<WebFont[]>}> = (props) => {\n    const { webFonts, setWebFonts } = props;\n    \n    const [fonts, setFonts] = useState<WebFont[]>();\n    const [fontsPerPage, setFontsPerPage] = useState(10);\n    const [activePage, setActivePage] = useState(1);\n    const [search, setSearch] = useState(\"\");\n    // const [selected, setSelected] = useState<string[]>([]);\n\n    const selected = useMemo(() => webFonts.map(f => f.family), [webFonts]);\n\n    const [categories, setCategories] = useState(AllFontCategories);\n\n    useEffect(() => {\n        (async ()=> {\n            const response = await fetch('./googlefonts.json', {method: 'GET'});\n            const payload = (await response.json()) as WebFontListPayload;\n            payload.items.forEach(f => {\n                if(!AllFontCategories.includes(f.category)) {\n                    console.warn(`Unknown font category in payload for font \"${f.family}\": \"${f.category}\". It will not be displayed.`);\n                }\n            })\n            setFonts(payload.items);\n        })()\n    }, [])\n\n    const toggleCategory = (category: FontCategory): ((event: any, data: {checked?: boolean}) => void) => (_, {checked}) => updateIncluded(setCategories, category, !!checked);\n\n    // const renderCategoryLabel = (item: DropdownItemProps, index: number) => ({\n    //     color: categoryColor[item.value as FontCategory],\n    //     content: item.text,\n    //     size: 'tiny'\n    // })\n\n    const filteredFonts = useMemo(() => (fonts ?? []).filter(f => \n        !selected.includes(f.family) && \n        categories.includes(f.category) && \n        f.family.toLowerCase().includes(search)\n    ), [fonts, categories, search, selected]);\n    const selectedFonts = useMemo(() => (fonts ?? []).filter(f => selected.includes(f.family)), [fonts, selected]);\n    const fontPages = useMemo(() => Math.ceil(filteredFonts.length / fontsPerPage), [filteredFonts, fontsPerPage]);\n\n    const updateSelected = (font: WebFont, selected: boolean) => setWebFonts(wfs => [...wfs.filter(wf => wf.family !== font.family), ...(selected ? [font] : [])])\n\n    return (\n        <>\n        <Segment attached='top' loading={!fonts}>\n                <div>\n                    <Input type='text' placeholder='Filter fonts...' fluid value={search} onChange={(e) => setSearch(e.target.value.toLowerCase())} />\n                </div>\n                <Divider />\n                <div>\n                    <Grid widths='equal' stretched columns={(AllFontCategories.length + 1) as SemanticWIDTHSNUMBER}>\n                        <Grid.Column width='2' >\n                        <label>Categories: </label>\n\n                        </Grid.Column>\n                    {AllFontCategories.map(category => \n                        <Grid.Column  key={category}>\n                            <Checkbox className=\"capitalized\" label={category} checked={categories.includes(category)} onChange={toggleCategory(category)} />\n                        </Grid.Column>)}\n                    </Grid>\n                </div>\n        \n        </Segment>\n\n            <Table attached compact>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.HeaderCell>Selected:</Table.HeaderCell>\n                        <Table.HeaderCell />\n                    </Table.Row>\n                    {selectedFonts.length > 0 ? (\n                        selectedFonts.map(f => <FontTableRow key={f.family} selected={selected.includes(f.family)} onToggle={(checked) => updateSelected(f, false)} font={f} />)\n                    ): (\n                        <Table.Row>\n                            <Table.Cell />\n                            <Table.Cell />\n\n                            <Table.Cell>No fonts selected</Table.Cell>\n                            <Table.Cell />\n                            <Table.Cell />\n\n                        </Table.Row>\n                        \n                    )}\n                    <Table.Row>\n                        <Table.HeaderCell>{\"Add:\"}</Table.HeaderCell>\n                        <Table.HeaderCell />\n                    </Table.Row>\n                    {fonts && filteredFonts.filter((_, i) => i >= fontsPerPage * (activePage-1) && i < fontsPerPage * activePage).map((f, i) => \n                        <FontTableRow key={f.family} selected={selected.includes(f.family)} onToggle={(checked) => updateSelected(f, true)} font={f} />\n\n                    )}\n                    </Table.Body>\n\n            </Table>\n\n        <Segment attached='bottom'> \n            <Grid>\n                <Grid.Column verticalAlign=\"bottom\" width='13'>\n                    <label>Pages:</label><br />\n                    <Pagination boundaryRange={2} siblingRange={2} activePage={activePage} totalPages={fontPages} onPageChange={(_, d) => setActivePage(d.activePage ? Number(d.activePage) : 1)} />\n                </Grid.Column>\n                <Grid.Column verticalAlign=\"bottom\" width='3'>\n\n                    <Input  fluid labelPosition='right'  type=\"number\" value={fontsPerPage} onChange={(e, d) => setFontsPerPage(e.target.valueAsNumber)}>\n                  \n    <input />\n    <Label className=\"normal-weight\" basic>of <strong>{filteredFonts.length}</strong></Label>\n                        </Input>\n\n                    \n\n                </Grid.Column>\n            </Grid>\n        </Segment>\n        </>\n    )\n}\n\nconst FontTableRow: React.FC<{font: WebFont, selected: boolean, onToggle: ((checked: boolean) => void)}> = ({font, selected, onToggle}) => {\n\n    const {category, family, variants} = font;\n\n    return (\n        <Table.Row>\n                        <Table.Cell width='1'>\n            <Checkbox style={{}} toggle checked={selected} onChange={(_, d) => onToggle(!!d.checked)} />\n            </Table.Cell>\n            <Table.Cell>\n                \n                <Header>\n                    {family}\n                </Header>\n            </Table.Cell>\n\n            <Table.Cell>\n            <FontPreview size='22px' font={font} /> \n            </Table.Cell>\n\n            <Table.Cell>\n\n                    <small title={variants.join(', ')}>{variants.length} variant(s)</small>\n            </Table.Cell>           \n             <Table.Cell>\n            <Label className=\"capitalized\" content={category} size=\"tiny\" color={categoryColor[category]} />\n            </Table.Cell>\n\n\n\n        </Table.Row>\n    )\n}\n\n\nconst FontPreview: React.FC<{font: WebFont, size: string}> = ({font, size}) => {\n\n    useEffect(() => {\n        const fontVariants = font.variants.map(v => {\n            const source = font.files[v];\n            const fontFace = new FontFace(font.family, `URL(${source})`);\n            console.log(`Loading font \"${font.family}\" (${v}) from ${source}`);\n            fontFace.load().then(ff => {\n                console.log(`Loaded \"${font.family}\" variant: ${v}!`);\n                document.fonts.add(ff);\n            })\n            return fontFace;\n        });\n\n        return () => {\n            fontVariants.forEach(fontFace => {\n                console.log(`Unloading \"${fontFace.family} // ${fontFace.featureSettings} // ${fontFace.style}!`);\n                document.fonts.delete(fontFace);\n            });\n        }\n    }, [font.family, font.variants, font.files]);\n\n    return (\n        <div style={{fontFamily: font.family, fontSize: size}}>Lorem jävla ipsum vafan</div>\n    )\n}","import { useEffect, useMemo, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.scss';\nimport 'semantic-ui-css/semantic.min.css';\nimport { ImageItem, ImageItemEditor, TextItemEditor, TextItem, LabelItemEditor } from './Items';\nimport { ItemData, LabelItemData } from './Items/common';\nimport { Button, Card, Container, Dropdown, Form, Header, Loader, Menu, MenuItem, Popup, Segment } from 'semantic-ui-react';\nimport { valueOptions } from './util';\nimport { Link, Route } from 'wouter';\nimport { FontsPage } from './Pages/FontsPage';\nimport { WebFont } from './fonts';\n\nconst itemDefaults = { marginTop: 0,  marginBottom: 0,  marginLeft: 0,  marginRight: 0, color: [0, 0, 0] as [number, number, number] };\nconst default_items: LabelItemData[] = [\n  { key: 't1', type: 'text', text: 'Hello?', font: '40px sans-serif', ...itemDefaults },\n  { key: 't2', type: 'text', text: 'Text with space', font: '40px sans-serif', ...itemDefaults },\n  { key: 'i1', type: 'image', image: './shoutrrr.png', ...itemDefaults },\n  { key: 't3', type: 'text', text: 'Wow!!', font: '40px sans-serif' , ...itemDefaults},\n]\n\nfunction App() {\n  \n  const [items, setItems] = useState<LabelItemData[]>(default_items);\n  const [error, setError] = useState<{title: string, message?: string} | undefined>();\n  const [webFonts, setWebFonts] = useState<WebFont[]>([]);\n\n  const [background, setBackground] = useState<string>(\"#f0f0f0\");\n  const [foreground, setForeground] = useState<string>(\"#000000\");\n\n  const labelColor: [number, number, number] = useMemo(() => (c => [(c >> 16) & 0xff, (c >> 8) & 0xff, c & 0xff])(parseInt(foreground.substring(1), 16)), [foreground])\n\n  const [selectedItem, setSelectedItem] = useState<LabelItemData | null>(null);\n\n  const updateItem = (newItem: LabelItemData | ItemData) =>\n    setItems(current => current.map(i => i.key === newItem.key ? newItem : i) as LabelItemData[]);\n  \n\n  \n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Menu>\n          <Link href={`${process.env.PUBLIC_URL}/label`}>\n            <MenuItem content='Label'></MenuItem>\n          </Link>\n          <Link href={`${process.env.PUBLIC_URL}/fonts`}>\n            <MenuItem content='Fonts'></MenuItem>\n          </Link>\n          <Link href={`${process.env.PUBLIC_URL}/printer`}>\n            <MenuItem content='Printer'></MenuItem>\n          </Link>\n        </Menu>\n\n      <Route path={`${process.env.PUBLIC_URL}/printer`}>\n        <ConnectionCard />\n      </Route>\n\n      <Route path={`${process.env.PUBLIC_URL}/fonts`}>\n        <FontsPage webFonts={webFonts} setWebFonts={setWebFonts} />\n      </Route>\n\n      <Route path={`${process.env.PUBLIC_URL}/label`}>\n        <FontLoader webFonts={webFonts} onError={(e: Error) => setError({title: 'Error loading font', message: e?.message})} />\n\n\n\n      <Segment>\n        <Header>Label editor\n          <div style={{float: 'right'}}><label>BG:\n          <input type='color' value={background} onChange={e => setBackground(e.target.value)}></input>\n            </label></div>\n            <div style={{float: 'right'}}><label>FG:\n          <input type='color' value={foreground} onChange={e => setForeground(e.target.value)}></input>\n            </label></div>\n\n        </Header>\n\n      {error && (<dialog><header>{error.title}</header><div>{error.message  ?? 'Unknown error'}</div></dialog>)}\n      <div style={{overflowY: 'visible',overflowX: 'auto', background: '#fff', padding: '10px', boxShadow: 'inset 1px 1px 4px #00000020' }}>\n      <div style={{display: 'flex', flexDirection: 'row', alignItems: 'flex-start', background: background, width: 'fit-content', boxShadow: '1px 1px 4px #00000020'  }}>\n\n        {items.map(item =>\n        <Popup key={item.key} on='click' position=\"bottom center\" onOpen={() => setSelectedItem(item)} onClose={() => setSelectedItem(null)} trigger={\n          <div className={`label-item${selectedItem?.key === item.key?' selected':''}`}>{/* onClick={() => setSelectedItem(item)} */}\n            <div className='indicator' />\n          {\n            item.type === 'text' ? <TextItem data={item} color={labelColor} /> :\n            item.type === 'image' ? <ImageItem data={item}  color={labelColor} /> :\n            <div>Invalid item</div>\n          } \n          </div>\n        }>\n          <LabelItemEditor data={item} setData={updateItem} />\n          {item.type === 'text' && <TextItemEditor data={item} setData={updateItem} />}\n          {item.type === 'image' && <ImageItemEditor data={item} setData={updateItem} />}\n        </Popup>\n\n        )}\n\n      {/* <LabelPreview />\n      <ImagePreview /> */}\n      <div style={{flex: 'auto', background: '#ffffff', alignSelf: 'stretch'}} />\n      </div>\n      </div>\n      </Segment>\n      </Route>\n      {/* <Segment attached='top'>\n        {selectedItem ? (\n          <>\n                      {selectedItem.type === 'text' && <TextItemEditor item={selectedItem} />}\n                      {selectedItem.type === 'image' && <ImageItemEditor item={selectedItem} />}\n          </>\n        ):(\n          <Message content='Select an item to edit' />\n        )}\n      </Segment> */}\n      </Container> \n    </div>\n  );\n}\n\n// {ports.map(port => (\n//   <li key={port.key}><details><summary>{port.key}</summary><pre>{JSON.stringify(port, null, 2)}</pre></details></li>\n// ))}\n\nexport default App;\n\nconst ConnectionCard = () => {\n\n  const { register, handleSubmit, formState: { errors } } = useForm<SerialOptions>();\n  const [currentPort, setCurrentPort] = useState<SerialPort | undefined>();\n  const [error, setError] = useState<{title: string, message?: string} | undefined>();\n\n  useEffect(() => {\n    if(Object.values(errors).every(v => !v)) return;\n    // setError({title: 'Errors', })\n  }, [errors]);\n\n  const onSerialConnect = (e: Event) => {\n    console.log(`Connected!`, e.target)\n  }\n\n  const onSerialDisconnect = (e: Event) => {\n    console.log(`Disconnected!`, e.target)\n  }\n\n  useEffect(() => {\n    if(!currentPort) return;\n    currentPort.addEventListener('connect', onSerialConnect);\n    currentPort.addEventListener('disconnect', onSerialDisconnect);\n    return () => {\n      currentPort.removeEventListener('connect', onSerialConnect);\n      currentPort.removeEventListener('disconnect', onSerialDisconnect);\n    }\n  }, [currentPort])\n  \n  const updatePorts = async () => {\n\n    \n    // const rawPorts = await navigator.serial.getPorts();\n    // console.log(`Got ${rawPorts.length} ports:`, rawPorts)\n    // const newPorts = rawPorts.map(raw => {\n    //   const info = raw.getInfo();\n    //   return {\n    //     ...info,\n    //     key: `${info.vendorId}/${info.productId}`,\n    //     raw,\n    //   }\n    // });\n    // setPorts(newPorts);\n\n    // button.addEventListener('click', () => {\n    //   const usbVendorId = ...;\n    //   navigator.serial.requestPort({ filters: [{ usbVendorId }]}).then((port) => {\n    //     // Connect to `port` or add it to the list of available ports.\n    //   }).catch((e) => {\n    //     // The user didn't select a port.\n    //   });\n    // });\n  }\n\n  const doConnect = async (options: SerialOptions) => {\n    try {\n      const port = await navigator.serial.requestPort(); \n      console.log('Port:', {...port});\n      console.log('Info:', port.getInfo());\n      setCurrentPort(port);\n      await port.open({baudRate: options.baudRate});\n      console.log('Port connected(?)!');\n      console.log('Info:', port.getInfo());\n    } catch (e) {\n      console.error(e);\n      setError({title: `Error connecting web serial`, message: (e as any)?.message });\n    }\n    //console.log('Info:', port.getInfo());\n  }\n\n  return (\n    <Card fluid>\n          <Card.Header style={{padding: '10px'}}>\n      <Button floated='right' color='violet' size='tiny' onClick={() => updatePorts()}>Update Ports</Button>\n          <Header floated='left'>Printer communication</Header>\n\n          </Card.Header>\n          <Card.Content>\n\n      <Form onSubmit={handleSubmit(doConnect)}>\n      <Form.Group widths='equal'>\n        <Form.Field>\n        <label>Baud Rate:</label>\n          <Dropdown selection options={valueOptions('75','110','300','1200','2400','4800','9600','19200','38400','57600','115200')} defaultValue=\"9600\" {...register(\"baudRate\")}>\n            {/* <option value=\"\">(default)</option>\n            {['75','110','300','1200','2400','4800','9600','19200','38400','57600','115200'].map(v => <option key={v}>{v}</option>)} */}\n          </Dropdown>\n        </Form.Field>\n        <Form.Field>\n        <label>\n          Data Bits:\n          </label>\n          <Dropdown selection options={valueOptions('5','6','7','8','9')} defaultValue=\"8\" {...register(\"dataBits\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Flow control:\n        </label>\n          <Dropdown selection options={valueOptions('none', 'hardware')} defaultValue=\"none\" {...register(\"flowControl\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Parity:\n        </label>\n          <Dropdown clearable selection options={valueOptions('none','odd','even','mark','space')} defaultValue=\"\" {...register(\"parity\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Stop Bits:\n        </label>\n          <Dropdown clearable selection options={valueOptions('1', '1.5', '2')} defaultValue=\"\" {...register(\"stopBits\")} />\n        </Form.Field>\n        </Form.Group>\n\n      <Button type=\"submit\" content=\"Connect\" />\n\n      {error && (<dialog><header>{error.title}</header><div>{error.message  ?? 'Unknown error'}</div></dialog>)}\n\n      </Form>\n            </Card.Content>\n      </Card>\n  )\n}\n\n\n\n\n\nconst FontLoader: React.FC<{webFonts: WebFont[], onError: ((error: Error) => void)}> = ({webFonts, onError}) => {\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n      const fontVariants = webFonts.flatMap(font => font.variants.map(v => {\n          const source = font.files[v];\n          const fontFace = new FontFace(font.family, `URL(${source})`);\n          console.log(`Loading font \"${font.family}\" (${v}) from ${source}`);\n          return fontFace;\n      }));\n\n      Promise.all(fontVariants.map(async ff => {\n        try {\n          await ff.load();\n          console.log(`Loaded \"${ff.family}\"!`);\n          document.fonts.add(ff);\n        } catch(error) {\n          onError(error as Error);\n        }\n      })).then(() => setLoading(false));\n\n      return () => {\n          fontVariants.forEach(fontFace => {\n              console.log(`Unloading \"${fontFace.family} // ${fontFace.featureSettings} // ${fontFace.style}!`);\n              document.fonts.delete(fontFace);\n          });\n      }\n  }, [webFonts, onError]);\n\n  return (\n      <Loader active={loading} />\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst ModeWrapper = process.env.STRICT_MODE === 'yes' ? React.StrictMode : React.Fragment;\n\nReactDOM.render(\n  <ModeWrapper>\n    <App />\n  </ModeWrapper>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}