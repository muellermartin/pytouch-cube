{"version":3,"sources":["Items/common.ts","Items/ImageItem.tsx","util.ts","Items/TextItem.tsx","Items/LabelItemEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["color_fg","color_bg","applyThreshold","ctx","threshold","inverted","pixels","getImageData","canvas","width","height","i","data","length","alpha_above_thresh","value","color","putImageData","ImageItemEditor","props","Form","Field","Button","content","ImageItem","image","useState","setWidth","imageLoaded","setImageLoaded","imgRef","useRef","canvasRef","useEffect","current","getContext","imgWidth","imgHeight","imageSmoothingEnabled","clearRect","scaledWidth","BUFFER_HEIGHT","drawImage","ref","src","style","display","alt","onLoad","imageRendering","valueOptions","values","map","v","key","text","toUpperCase","substring","TextItem","font","document","fonts","check","textRect","measureText","console","log","textHeight","fontBoundingBoxAscent","fontBoundingBoxDescent","verticalOffset","fillText","actualBoundingBoxAscent","moveTo","lineTo","strokeStyle","stroke","TextItemEditor","item","setItem","setText","fontName","setFontName","fontSize","setFontSize","split","size","name","match","exec","parsedSize","parseInt","fontString","fontOptions","useMemo","documentFonts","Set","Array","from","entries","a","family","sort","b","al","toLowerCase","bl","minWidth","Group","widths","Dropdown","selection","search","options","Input","type","onKeyDownCapture","e","s","onWheel","deltaY","deltaMode","labelPosition","label","Message","header","onChange","target","LabelItemEditor","Checkbox","toggle","checked","_","d","rotated","flippedHorizontal","flippedVertical","min","max","itemDefaults","marginTop","marginBottom","marginLeft","marginRight","default_items","App","useForm","register","handleSubmit","errors","formState","currentPort","setCurrentPort","error","setError","Object","every","items","setItems","onSerialConnect","onSerialDisconnect","addEventListener","removeEventListener","updatePorts","doConnect","navigator","serial","requestPort","port","getInfo","open","baudRate","title","message","selectedItem","setSelectedItem","updateItem","newItem","className","Container","Card","fluid","Header","padding","floated","onClick","Content","onSubmit","defaultValue","clearable","Segment","flexDirection","alignItems","Popup","on","position","onOpen","onClose","trigger","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.98510310.chunk.js","sourcesContent":["import { TextItemProps } from \"./TextItem\";\nimport { ImageItemProps } from \"./ImageItem\";\n\nexport const BUFFER_HEIGHT = 128;\nexport const PRINT_MARGIN = 30;\nexport const USABLE_HEIGHT = BUFFER_HEIGHT - (PRINT_MARGIN * 2);\n\nexport const color_fg = [0, 0, 0, 255];\nexport const color_bg = [255, 255, 255, 255];\n\n\nexport type LabelItemData = TextItemProps | ImageItemProps;\n\n\n\n\nexport const applyThreshold = (ctx: CanvasRenderingContext2D, threshold?: number, inverted?: boolean) => {\n    if(typeof threshold === 'undefined') threshold = 128;\n\n    const pixels = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    for(let i = 0; i < pixels.data.length; i += 4) {\n        const alpha_above_thresh = pixels.data[i+3] > threshold;\n        const value = (pixels.data[i]+pixels.data[i+1]+pixels.data[i+2]) / 3;\n        const bright_above_thresh = value > threshold;\n        \n        const color = alpha_above_thresh && (bright_above_thresh !== !inverted) ? color_fg : color_bg;\n        pixels.data[i + 0] = color[0];\n        pixels.data[i + 1] = color[1];\n        pixels.data[i + 2] = color[2];\n        pixels.data[i + 3] = color[3];\n    }\n    ctx.putImageData(pixels, 0, 0);\n}\n\n\nexport const getImageDim = (dim: number | SVGAnimatedLength) => typeof dim === 'number' ? dim : dim.baseVal.value;\n\nexport interface ItemProps {\n    key: string;\n    threshold?: number;\n    inverted?: boolean;\n    rotated?: boolean;\n    flippedHorizontal?: boolean;\n    flippedVertical?: boolean;\n    marginTop: number;\n    marginBottom: number;\n    marginLeft: number;\n    marginRight: number;\n}\n\nexport type ItemEditorProps<T> = { item: T, setItem: (item: T) => void }","import { useEffect, useRef, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ItemProps, USABLE_HEIGHT, applyThreshold, ItemEditorProps } from \"./common\";\n\n\nexport interface ImageItemProps extends ItemProps {\n    type: 'image';\n    image: string;\n}\n\n\n\nexport const ImageItemEditor: React.FC<ItemEditorProps<ImageItemProps>> = (props) => {\n\n    return (\n        <>\n            <Form>\n                <Form.Field>\n                    <label>Image:</label>\n                    <Button content=\"Browse...\" />\n                </Form.Field>\n            </Form>\n        </>\n    )\n}\n\nexport const ImageItem: React.FC<ImageItemProps> = (props) => {\n    const {threshold, inverted, image} = props;\n    const [width, setWidth] = useState(200);\n    const [imageLoaded, setImageLoaded] = useState(false);\n\n    const imgRef = useRef<HTMLImageElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    useEffect(() => {\n        const ctx = canvasRef.current?.getContext('2d');\n        if(!ctx) return;\n        if (!imgRef.current) return;\n        if (!imageLoaded) return;\n\n        const imgWidth = imgRef.current.width;\n        const imgHeight = imgRef.current.height;\n\n        ctx.imageSmoothingEnabled = false;\n        // ctx.globalCompositeOperation\n\n\n        ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        const scaledWidth = imgWidth * (USABLE_HEIGHT / imgHeight);\n\n        if (scaledWidth !== width) {\n            ctx.canvas.width = scaledWidth;\n            ctx.canvas.height = USABLE_HEIGHT;\n            ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            setWidth(scaledWidth);\n            return;\n        }\n\n        ctx.drawImage(imgRef.current, 0, 0, scaledWidth,USABLE_HEIGHT);\n\n        if (width <= 0) return;\n\n        applyThreshold(ctx, threshold, inverted)\n\n    }, [canvasRef, width, image, threshold, inverted, imageLoaded]);\n\n    useEffect(()=> {\n        setImageLoaded(false);\n    }, [image]);\n\n    return (\n        <>\n            <img ref={imgRef} src={image} style={{display: 'none'}} alt=\"\" onLoad={()=>setImageLoaded(true)} />\n            <canvas ref={canvasRef} style={{imageRendering: 'pixelated', height: '140px'}} />\n        </>\n    )\n}","export const valueOptions = (...values: string[]) => values.map(v => ({key: v, value: v, text: v[0].toUpperCase()+v.substring(1) }));","import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Dropdown, Form, Input, Message } from \"semantic-ui-react\";\nimport { valueOptions } from \"../util\";\nimport { ItemProps, USABLE_HEIGHT, applyThreshold, ItemEditorProps } from \"./common\";\n\nexport interface TextItemProps extends ItemProps {\n    type: 'text';\n    text: string;\n    font: string;\n}\n\n\nexport const TextItem: React.FC<TextItemProps> = (props) => {\n    const {text, font, threshold, inverted} = props;\n    const [width, setWidth] = useState(200);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const ctx = canvasRef.current?.getContext('2d');\n        if(!ctx) return;\n\n        ctx.imageSmoothingEnabled = false;\n        // ctx.globalCompositeOperation\n\n        try {\n            if (!document.fonts.check(font)) return;\n        }\n        catch {\n            return;\n        }\n\n        ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        ctx.font = font;\n        \n        const textRect = ctx.measureText(text);\n        if (width !== textRect.width) {\n            console.log(textRect.width, '!=', width);\n            ctx.canvas.width = textRect.width;\n            ctx.canvas.height = USABLE_HEIGHT;\n            ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            setWidth(textRect.width);\n            return;\n        }\n\n        const textHeight = textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent + textRect.fontBoundingBoxDescent;\n        const verticalOffset = (ctx.canvas.height - textHeight) / 2;\n        \n        ctx.fillText(text, 0, verticalOffset + textRect.actualBoundingBoxAscent + textRect.fontBoundingBoxDescent, width);\n\n        if (width <= 0) return;\n\n        applyThreshold(ctx, threshold, inverted);\n\n        \n\n        ctx.moveTo(0, verticalOffset);\n        ctx.lineTo(width, verticalOffset);\n        ctx.moveTo(0, verticalOffset + textRect.fontBoundingBoxDescent);\n        ctx.lineTo(width, verticalOffset + textRect.fontBoundingBoxDescent);\n\n        ctx.moveTo(0, verticalOffset + textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent);\n        ctx.lineTo(width, verticalOffset + textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent);\n\n        ctx.moveTo(0, verticalOffset + textHeight);\n        ctx.lineTo(width, verticalOffset + textHeight);\n        ctx.strokeStyle = \"red\";\n        ctx.stroke();\n\n    }, [canvasRef, width, text, font, threshold, inverted]);\n\n\n    return (\n        <canvas ref={canvasRef} style={{imageRendering: 'pixelated', height: '140px'}} />\n    )\n}\n\nexport const TextItemEditor: React.FC<ItemEditorProps<TextItemProps>> = (props) => {\n\n    const {item, setItem} = props;\n    const [text, setText] = useState('Hello!');\n    const [fontName, setFontName] = useState('otsutome_font');\n    const [fontSize, setFontSize] = useState(40);\n\n    useEffect(() => {\n\n        const [size, name] = item.font.split(' ');\n        setFontName(name);\n\n        const match = /([0-9]+)(.*)/.exec(size);\n        if (match) {\n            const parsedSize = parseInt(match[1]);\n            setFontSize(parsedSize);\n        }\n\n    }, [item.font]);\n\n    useEffect(() => {\n        const fontString = `${fontSize}px ${fontName}`;\n        if(item.font === fontString) return;\n        setItem({...item, font: fontString});\n    }, [fontName, fontSize, item, setItem])\n    \n\n    // const bumpFontSize = (amt: number) => {\n\n    //     if(match && match.length === 3) {\n    //         parts[0] = `${parseInt(match[1]) + amt}${match[2]}`;\n    //         setFont(parts.join(' '));\n    //     }\n    // }\n\n    const handleFontKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        if(e.key === 'ArrowUp') {\n            setFontSize(s => s + 1);\n        } else if (e.key === 'ArrowDown') {\n            setFontSize(s => s - 1);\n        }\n        else console.log(e.key);\n    }\n\n    const handleFontWheel: React.WheelEventHandler<HTMLInputElement> = (e) => {\n        console.log(e.deltaY, e.deltaMode);\n        setFontSize(s => s + (e.deltaY < 0 ? 1 : -1));\n    }\n\n    const fontOptions = useMemo(() => {\n        const documentFonts = new Set(Array.from(document.fonts.entries()).map(([a, b]) =>a.family));\n        const fonts = ['otsutome_font', ...documentFonts].sort((a, b) => ((al, bl) =>  al < bl ? -1 : al > bl ? 1 : 0)(a.toLowerCase(), b.toLowerCase()));\n        return valueOptions(...fonts)\n    }, []);\n\n    const fontString = useMemo(() => `${fontSize}px ${fontName}`, [fontName, fontSize]);\n\n    return (\n        <>\n\n            <Form style={{minWidth: '400px'}}>\n                <Form.Group widths='equal'>\n                    <Form.Field>\n                        <label>Font</label>\n                        <Dropdown selection search value={fontName} options={fontOptions}  />\n                    </Form.Field>\n                    <Form.Field width='6'>\n                        <label>Size</label>\n                        <Input type='number' value={fontSize} onKeyDownCapture={handleFontKeyDown} onWheel={handleFontWheel} labelPosition=\"right\" label='px' />\n                    </Form.Field>\n\n                </Form.Group>\n\n                    <Message content={<code>{fontString}</code>} header=\"Font string:\" />\n\n                <Form.Field>\n                    <label>Text</label>\n                    <Input type=\"text\" value={text} onChange={e => setText(e.target.value)} />\n                </Form.Field>\n            </Form>\n        </>\n    )\n}","import React from \"react\";\nimport { Checkbox, Form, Input } from \"semantic-ui-react\";\nimport { ItemEditorProps, ItemProps } from \"./common\";\n\ntype GenericItemProps = ItemProps & {type: any, image?: any, text?: any};\n\nexport const LabelItemEditor: React.FC<ItemEditorProps<GenericItemProps>> = (props) => {\n    const {item, setItem} = props;\n\n\n    return (\n        <Form>\n            <Form.Field>\n                <Checkbox toggle checked={item.inverted} label=\"Inverted\" onChange={(_, d) => setItem(({...item, inverted: !!d.checked}))} />\n            </Form.Field>\n            <Form.Field>\n\n                <Checkbox toggle checked={item.rotated} label=\"Rotated\" />\n            </Form.Field>\n            <Form.Field>\n\n                <label>Flipped:</label>\n        \n\n                <Form.Group widths='equal'>\n            <Form.Field>\n\n                <Checkbox toggle checked={item.flippedHorizontal} label=\"Horizontal\" />\n                <Form.Field>\n                </Form.Field>\n                <Checkbox toggle checked={item.flippedVertical} label=\"Vertical\" />\n            </Form.Field>\n\n                </Form.Group>\n            </Form.Field>\n\n            <Form.Field>\n                <label>Threshold</label>\n                <Input type=\"range\" min=\"0\" max=\"254\" value={item.threshold ?? 128} onChange={(_, d) => setItem(({...item, threshold: parseInt(d.value, 10)}))} />\n            </Form.Field>\n\n        </Form>\n    )\n} \n","import { useEffect, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.scss';\nimport 'semantic-ui-css/semantic.min.css';\nimport { ImageItem, ImageItemEditor, TextItemEditor, TextItem, LabelItemEditor } from './Items';\nimport { ItemProps, LabelItemData } from './Items/common';\nimport { Button, Card, Container, Dropdown, Form, Header, Popup, Segment } from 'semantic-ui-react';\nimport { valueOptions } from './util';\n\nconst itemDefaults = { marginTop: 0,  marginBottom: 0,  marginLeft: 0,  marginRight: 0 };\nconst default_items: LabelItemData[] = [\n  { key: 't1', type: 'text', text: 'Hello?', font: '40px sans-serif', ...itemDefaults },\n  { key: 't2', type: 'text', text: 'Text with space', font: '40px sans-serif', ...itemDefaults },\n  { key: 'i1', type: 'image', image: './shoutrrr.png', ...itemDefaults },\n  { key: 't3', type: 'text', text: 'Wow!!', font: '40px sans-serif' , ...itemDefaults},\n]\n\nfunction App() {\n  const { register, handleSubmit, formState: { errors } } = useForm<SerialOptions>();\n  const [currentPort, setCurrentPort] = useState<SerialPort | undefined>();\n  const [error, setError] = useState<{title: string, message?: string} | undefined>();\n\n  useEffect(() => {\n    if(Object.values(errors).every(v => !v)) return;\n    // setError({title: 'Errors', })\n  }, [errors]);\n\n  const [items, setItems] = useState<LabelItemData[]>(default_items);\n\n  const onSerialConnect = (e: Event) => {\n    console.log(`Connected!`, e.target)\n  }\n\n  const onSerialDisconnect = (e: Event) => {\n    console.log(`Disconnected!`, e.target)\n  }\n\n  useEffect(() => {\n    if(!currentPort) return;\n    currentPort.addEventListener('connect', onSerialConnect);\n    currentPort.addEventListener('disconnect', onSerialDisconnect);\n    return () => {\n      currentPort.removeEventListener('connect', onSerialConnect);\n      currentPort.removeEventListener('disconnect', onSerialDisconnect);\n    }\n  }, [currentPort])\n  \n  const updatePorts = async () => {\n\n    \n    // const rawPorts = await navigator.serial.getPorts();\n    // console.log(`Got ${rawPorts.length} ports:`, rawPorts)\n    // const newPorts = rawPorts.map(raw => {\n    //   const info = raw.getInfo();\n    //   return {\n    //     ...info,\n    //     key: `${info.vendorId}/${info.productId}`,\n    //     raw,\n    //   }\n    // });\n    // setPorts(newPorts);\n\n    // button.addEventListener('click', () => {\n    //   const usbVendorId = ...;\n    //   navigator.serial.requestPort({ filters: [{ usbVendorId }]}).then((port) => {\n    //     // Connect to `port` or add it to the list of available ports.\n    //   }).catch((e) => {\n    //     // The user didn't select a port.\n    //   });\n    // });\n  }\n\n  const doConnect = async (options: SerialOptions) => {\n    try {\n      const port = await navigator.serial.requestPort(); \n      console.log('Port:', {...port});\n      console.log('Info:', port.getInfo());\n      setCurrentPort(port);\n      await port.open({baudRate: options.baudRate});\n      console.log('Port connected(?)!');\n      console.log('Info:', port.getInfo());\n    } catch (e) {\n      console.error(e);\n      setError({title: `Error connecting web serial`, message: (e as any)?.message });\n    }\n    //console.log('Info:', port.getInfo());\n  }\n\n  const [selectedItem, setSelectedItem] = useState<LabelItemData | null>(null);\n\n  const updateItem = (newItem: LabelItemData | ItemProps) => setItems(current => current.map(i => i.key === newItem.key ? newItem : i) as LabelItemData[]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Card fluid>\n          <Card.Header style={{padding: '10px'}}>\n      <Button floated='right' color='violet' size='tiny' onClick={() => updatePorts()}>Update Ports</Button>\n          <Header floated='left'>Printer communication</Header>\n\n          </Card.Header>\n          <Card.Content>\n\n      <Form onSubmit={handleSubmit(doConnect)}>\n      <Form.Group widths='equal'>\n        <Form.Field>\n        <label>Baud Rate:</label>\n          <Dropdown selection options={valueOptions('75','110','300','1200','2400','4800','9600','19200','38400','57600','115200')} defaultValue=\"9600\" {...register(\"baudRate\")}>\n            {/* <option value=\"\">(default)</option>\n            {['75','110','300','1200','2400','4800','9600','19200','38400','57600','115200'].map(v => <option key={v}>{v}</option>)} */}\n          </Dropdown>\n        </Form.Field>\n        <Form.Field>\n        <label>\n          Data Bits:\n          </label>\n          <Dropdown selection options={valueOptions('5','6','7','8','9')} defaultValue=\"8\" {...register(\"dataBits\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Flow control:\n        </label>\n          <Dropdown selection options={valueOptions('none', 'hardware')} defaultValue=\"none\" {...register(\"flowControl\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Parity:\n        </label>\n          <Dropdown clearable selection options={valueOptions('none','odd','even','mark','space')} defaultValue=\"\" {...register(\"parity\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Stop Bits:\n        </label>\n          <Dropdown clearable selection options={valueOptions('1', '1.5', '2')} defaultValue=\"\" {...register(\"stopBits\")} />\n        </Form.Field>\n        </Form.Group>\n\n      <Button type=\"submit\" content=\"Connect\" />\n\n      </Form>\n            </Card.Content>\n      </Card>\n      <Segment>\n        <Header>Label editor</Header>\n      {error && (<dialog><header>{error.title}</header><div>{error.message  ?? 'Unknown error'}</div></dialog>)}\n\n      <div style={{display: 'flex', flexDirection: 'row', alignItems: 'flex-start'}}>\n\n        {items.map(item =>\n        <Popup key={item.key} on='click' position=\"bottom center\" onOpen={() => setSelectedItem(item)} onClose={() => setSelectedItem(null)} trigger={\n          <div className={`label-item${selectedItem?.key === item.key?' selected':''}`}>{/* onClick={() => setSelectedItem(item)} */}\n          {\n            item.type === 'text' ? <TextItem {...item} /> :\n            item.type === 'image' ? <ImageItem {...item} /> :\n            <div>Invalid item</div>\n          } \n          </div>\n        }>\n          <LabelItemEditor item={item} setItem={updateItem} />\n          {item.type === 'text' && <TextItemEditor item={item} setItem={updateItem} />}\n          {item.type === 'image' && <ImageItemEditor item={item} setItem={updateItem} />}\n        </Popup>\n\n        )}\n\n      {/* <LabelPreview />\n      <ImagePreview /> */}\n      </div>\n      </Segment>\n      {/* <Segment attached='top'>\n        {selectedItem ? (\n          <>\n                      {selectedItem.type === 'text' && <TextItemEditor item={selectedItem} />}\n                      {selectedItem.type === 'image' && <ImageItemEditor item={selectedItem} />}\n          </>\n        ):(\n          <Message content='Select an item to edit' />\n        )}\n      </Segment> */}\n      </Container> \n    </div>\n  );\n}\n\n// {ports.map(port => (\n//   <li key={port.key}><details><summary>{port.key}</summary><pre>{JSON.stringify(port, null, 2)}</pre></details></li>\n// ))}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}