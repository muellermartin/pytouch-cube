{"version":3,"sources":["Items/common.ts","Items/ImageItem.tsx","util.ts","Items/TextItem.tsx","Items/LabelItemEditor.tsx","fonts.ts","Pages/FontsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["applyThreshold","ctx","color","threshold","inverted","mask","pixels","getImageData","canvas","width","height","i","data","length","alpha_above_thresh","value","alpha","putImageData","ImageItemEditor","props","Form","Field","Button","content","ImageItem","image","useState","setWidth","imageLoaded","setImageLoaded","imageError","setImageError","imgRef","useRef","canvasRef","useEffect","current","getContext","font","fillText","console","log","imgWidth","imgHeight","imageSmoothingEnabled","clearRect","scaledWidth","BUFFER_HEIGHT","drawImage","handleImageError","img","addEventListener","removeEventListener","ref","src","crossOrigin","style","display","alt","onLoad","imageRendering","valueOptions","values","map","v","key","text","toUpperCase","substring","defaultFonts","guiFonts","TextItem","document","fonts","check","textRect","measureText","minWidth","Math","ceil","textHeight","fontBoundingBoxAscent","fontBoundingBoxDescent","verticalOffset","actualBoundingBoxAscent","env","NODE_ENV","moveTo","lineTo","strokeStyle","stroke","TextItemEditor","setData","fontName","setFontName","fontSize","setFontSize","split","size","name","match","exec","parsedSize","parseInt","fontString","fontOptions","useMemo","documentFonts","Set","Array","from","entries","a","family","filter","f","includes","sort","b","al","toLowerCase","bl","Input","type","onChange","e","target","Group","widths","Dropdown","selection","search","options","_","d","toString","onKeyDownCapture","s","bumpFontSize","onWheel","deltaY","deltaMode","labelPosition","label","href","process","amount","max","LabelItemEditor","Checkbox","toggle","checked","disabled","rotated","flippedHorizontal","flippedVertical","min","AllFontCategories","categoryColor","handwriting","serif","monospace","FontsPage","webFonts","setWebFonts","setFonts","fontsPerPage","setFontsPerPage","activePage","setActivePage","setSearch","selected","categories","setCategories","fetch","method","response","json","payload","items","forEach","category","warn","toggleCategory","item","included","filteredFonts","selectedFonts","fontPages","updateSelected","wfs","wf","Segment","attached","loading","placeholder","fluid","Divider","Grid","stretched","columns","Column","className","Table","compact","Body","Row","HeaderCell","onToggle","Cell","verticalAlign","Pagination","boundaryRange","siblingRange","totalPages","onPageChange","Number","valueAsNumber","Label","basic","FontTableRow","variants","Header","title","join","FontPreview","fontVariants","source","URL","files","protocol","location","fontFace","FontFace","load","then","ff","add","featureSettings","delete","fontFamily","itemDefaults","marginTop","marginBottom","marginLeft","marginRight","default_items","App","setItems","error","setError","background","setBackground","foreground","setForeground","labelColor","c","selectedItem","setSelectedItem","updateItem","newItem","Container","Menu","MenuItem","path","onError","message","float","overflowY","overflowX","padding","boxShadow","flexDirection","alignItems","Popup","on","position","onOpen","onClose","trigger","flex","opacity","alignSelf","icon","margin","onAdd","AddLabelDialog","setType","setValue","Date","getTime","toFixed","newItemData","onSubmit","Radio","ConnectionCard","useForm","register","handleSubmit","errors","formState","currentPort","setCurrentPort","Object","every","onSerialConnect","onSerialDisconnect","updatePorts","doConnect","navigator","serial","requestPort","port","getInfo","open","baudRate","Card","floated","onClick","Content","defaultValue","clearable","FontLoader","setLoading","flatMap","Promise","all","Loader","active","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ModeWrapper","STRICT_MODE","React","StrictMode","Fragment","ReactDOM","render","getElementById"],"mappings":"gTAgBaA,EAAiB,SAACC,EAA+BC,EAAiCC,EAAoBC,EAAoBC,GAC3G,qBAAdF,IAA2BA,EAAY,KAGjD,IADA,IAAMG,EAASL,EAAIM,aAAa,EAAG,EAAGN,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,QAC3DC,EAAI,EAAGA,EAAIL,EAAOM,KAAKC,OAAQF,GAAK,EAAG,CAC3C,IAAMG,EAAqBR,EAAOM,KAAKD,EAAE,GAAKR,EACxCY,GAAST,EAAOM,KAAKD,GAAGL,EAAOM,KAAKD,EAAE,GAAGL,EAAOM,KAAKD,EAAE,IAAM,EAO7DK,IAAWX,KAHIS,GAHOC,EAAQZ,MAGkCC,GAG5B,IAAM,EAIhDE,EAAOM,KAAKD,EAAI,GAAKT,EAAM,GAC3BI,EAAOM,KAAKD,EAAI,GAAKT,EAAM,GAC3BI,EAAOM,KAAKD,EAAI,GAAKT,EAAM,GAC3BI,EAAOM,KAAKD,EAAI,GAAMK,EAE1Bf,EAAIgB,aAAaX,EAAQ,EAAG,I,OCvBnBY,EAA4D,SAACC,GAEtE,OACI,mCACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,2CACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,sBAOvBC,EAAsC,SAACL,GAChD,IAAOP,EAAQO,EAARP,KACP,EAAqCO,EAAMP,KAApCT,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,SAAUqB,EAA5B,EAA4BA,MAC5B,EAA0BC,mBAAS,KAAnC,mBAAOjB,EAAP,KAAckB,EAAd,KACA,EAAsCD,oBAAS,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAASC,iBAAyB,MAClCC,EAAYD,iBAA0B,MAC5CE,qBAAU,WAAO,IAAD,EACNlC,EAAG,UAAGiC,EAAUE,eAAb,aAAG,EAAmBC,WAAW,MAC1C,GAAIpC,GACC+B,EAAOI,SACPR,EAAL,CAEA,GAAIE,EAMA,OALA7B,EAAIO,OAAOC,MAAQ,IACnBkB,EAAS,KACT1B,EAAIqC,KAAO,kBACXrC,EAAIsC,SAAS,eAAM,GAAI,SACvBC,QAAQC,IAAI,eAIhB,IAAMC,EAAWV,EAAOI,QAAQ3B,MAC1BkC,EAAYX,EAAOI,QAAQ1B,OAEjCT,EAAI2C,uBAAwB,EAI5B3C,EAAI4C,UAAW,EAAG,EAAG5C,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,QAElD,IAAMoC,EAAcJ,GDzDCK,GCyD2BJ,GAEhD,GAAIG,IAAgBrC,EAMhB,OALAR,EAAIO,OAAOC,MAAQqC,EACnB7C,EAAIO,OAAOE,OD7DMqC,GC8DjB9C,EAAI4C,UAAW,EAAG,EAAG5C,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,aAElDiB,EAASmB,GAIb7C,EAAI+C,UAAUhB,EAAOI,QAAS,EAAG,EAAGU,EDpEfC,ICsEjBtC,GAAS,GAEbT,EAAeC,EAAKkB,EAAMjB,MAAOC,EAAWC,EAAUQ,EAAKP,SAE5D,CAAC6B,EAAWzB,EAAOgB,EAAOtB,EAAWC,EAAUwB,EAAaT,EAAMjB,MAAOU,EAAKP,KAAMyB,IAEvFK,qBAAU,WACNN,GAAe,KAChB,CAACJ,IAEJ,IAAMwB,EAAmB,WACrBpB,GAAe,GACfE,GAAc,IAUlB,OAPAI,qBAAU,WACN,IAAMe,EAAMlB,EAAOI,QACnB,GAAIc,EAEJ,OADAA,EAAIC,iBAAiB,QAASF,GACvB,kBAAMC,EAAIE,oBAAoB,QAASH,MAC/C,CAACjB,IAGA,qCACI,qBAAKqB,IAAKrB,EAAQsB,IAAK7B,EAAO8B,YAAY,YAAYC,MAAO,CAACC,QAAS,QAASC,IAAI,GAAGC,OAAQ,kBAAI9B,GAAe,MAClH,wBAAQwB,IAAKnB,EAAWsB,MAAO,CAACI,eAAgB,YAAalD,OAAQ,e,mCClGpEmD,EAAe,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAyBA,EAAOC,KAAI,SAAAC,GAAC,MAAK,CAACC,IAAKD,EAAGjD,MAAOiD,EAAGE,KAAMF,EAAE,GAAGG,cAAcH,EAAEI,UAAU,QCexHC,EAAe,CAEjB,QACA,aACA,aAGEC,EAAW,CACb,SACA,OACA,gBACA,QACA,WACA,WACA,cACA,aAGSC,EAAoC,SAACpD,GAC9C,MAA0CA,EAAMP,KAAzCsD,EAAP,EAAOA,KAAM5B,EAAb,EAAaA,KAAMnC,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,SAC9B,EAA0BsB,mBAAS,KAAnC,mBAAOjB,EAAP,KAAckB,EAAd,KACMO,EAAYD,iBAA0B,MAkE5C,OAhEAE,qBAAU,WAAO,IAAD,EACNlC,EAAG,UAAGiC,EAAUE,eAAb,aAAG,EAAmBC,WAAW,MAC1C,GAAIpC,EAAJ,CAEAA,EAAI2C,uBAAwB,EAG5B,IACI,IAAK4B,SAASC,MAAMC,MAAMpC,GAAO,OAErC,SACI,OAIJrC,EAAI4C,UAAW,EAAG,EAAG5C,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,QAElDT,EAAIqC,KAAOA,EAEX,IAAMqC,EAAW1E,EAAI2E,YAAYV,GAC3BW,EAAWC,KAAKC,KAAKJ,EAASlE,OACpC,GAAIR,EAAIO,OAAOC,QAAUoE,EAUjB,OAPArC,QAAQC,IAAIkC,EAASlE,MAAO,KAAMA,EAAOR,EAAIO,OAAOC,MAAOoE,EAA3D,WAAyEX,EAAzE,mBAAwF5B,IAExFrC,EAAIO,OAAOC,MAAQoE,EAEnB5E,EAAI4C,UAAW,EAAG,EAAG5C,EAAIO,OAAOC,MAAOR,EAAIO,OAAOE,aAElDiB,EAASkD,GAKjB,IAAMG,EAAaL,EAASM,sBAAwBN,EAASO,uBAAyBP,EAASO,uBACzFC,GAAkBlF,EAAIO,OAAOE,OAASsE,GAAc,EAG1D/E,EAAIsC,SAAS2B,EAAM,EAAGiB,EAAiBR,EAASS,wBAA0BT,EAASO,uBAAwBzE,GAEvGA,GAAS,IAEbT,EAAeC,EAAKkB,EAAMjB,MAAOC,GAAW,EAAOgB,EAAMP,KAAKP,MAG1C,gBAAjBgF,MAAIC,WACHrF,EAAIsF,OAAO,EAAGJ,GACdlF,EAAIuF,OAAO/E,EAAO0E,GAClBlF,EAAIsF,OAAO,EAAGJ,EAAiBR,EAASO,wBACxCjF,EAAIuF,OAAO/E,EAAO0E,EAAiBR,EAASO,wBAE5CjF,EAAIsF,OAAO,EAAGJ,EAAiBR,EAASM,sBAAwBN,EAASO,wBACzEjF,EAAIuF,OAAO/E,EAAO0E,EAAiBR,EAASM,sBAAwBN,EAASO,wBAE7EjF,EAAIsF,OAAO,EAAGJ,EAAiBH,GAC/B/E,EAAIuF,OAAO/E,EAAO0E,EAAiBH,GACnC/E,EAAIwF,YAAc,YAClBxF,EAAIyF,cAGT,CAACxD,EAAWzB,EAAOyD,EAAM5B,EAAMnC,EAAWC,EAAUe,EAAMjB,MAAOiB,EAAMP,KAAKP,OAI3E,wBAAQgD,IAAKnB,EAAWsB,MAAO,CAACI,eAAgB,YAAalD,OAAQ,YAIhEiF,EAA0D,SAACxE,GAEpE,IAAOP,EAAiBO,EAAjBP,KAAMgF,EAAWzE,EAAXyE,QACb,EAAgClE,qBAAhC,mBAAOmE,EAAP,KAAiBC,EAAjB,KACA,EAAgCpE,qBAAhC,mBAAOqE,EAAP,KAAiBC,EAAjB,KAEA7D,qBAAU,WAGN,MAAqBvB,EAAK0B,KAAK2D,MAAM,KAArC,mBAAOC,EAAP,KAAaC,EAAb,KACIN,GAAUC,EAAYK,GAE1B,IAAMC,EAAQ,eAAeC,KAAKH,GAClC,GAAIE,IAAUL,EAAU,CACpB,IAAMO,EAAaC,SAASH,EAAM,IAClCJ,EAAYM,MAGjB,CAAC1F,EAAK0B,KAAMuD,EAAUE,IAEzB5D,qBAAU,WACN,GAAI0D,GAAaE,EAAjB,CACA,IAAMS,EAAU,UAAMT,EAAN,cAAoBF,GACjCjF,EAAK0B,OAASkE,GAEjBZ,EAAQ,2BAAIhF,GAAL,IAAW0B,KAAMkE,QACzB,CAACX,EAAUE,EAAUnF,EAAMgF,IAW9B,IAeMa,EAAcC,mBAAQ,WACxB,IAAMC,EAAgB,IAAIC,IAAIC,MAAMC,KAAKtC,SAASC,MAAMsC,WAAWhD,KAAI,mCAAEiD,EAAF,iBAAYA,EAAEC,UAAQC,QAAO,SAAAC,GAAC,OAAK7C,EAAS8C,SAASD,OACtH1C,EAAQ,UAAIJ,EAAJ,YAAqBsC,IAAeU,MAAK,SAACL,EAAGM,GAAJ,OAAYC,EAA4CP,EAAEQ,cAA1CC,EAAyDH,EAAEE,cAAnDD,EAAKE,GAAM,EAAIF,EAAKE,EAAK,EAAI,EAA1C,IAACF,EAAIE,KACvE,OAAO5D,EAAY,WAAZ,cAAgBY,MACxB,IAEH,OACI,mCAEI,eAACrD,EAAA,EAAD,CAAMoC,MAAO,CAACqB,SAAU,SAAxB,UAEA,eAACzD,EAAA,EAAKC,MAAN,WACQ,yCACA,cAACqG,EAAA,EAAD,CAAOC,KAAK,OAAO5G,MAAOH,EAAKsD,KAAM0D,SAAU,SAAAC,GAAC,OAAIjC,EAAQ,2BAAIhF,GAAL,IAAWsD,KAAM2D,EAAEC,OAAO/G,eAGzF,eAACK,EAAA,EAAK2G,MAAN,CAAYC,OAAO,QAAnB,UACI,eAAC5G,EAAA,EAAKC,MAAN,WACI,yCACA,cAAC4G,EAAA,EAAD,CAAUC,WAAS,EAACC,QAAM,EAACpH,MAAO8E,EAAUuC,QAAS3B,EAAamB,SAAU,SAACS,EAAGC,GAAJ,aAAUxC,EAAW,UAACwC,EAAEvH,aAAH,aAAC,EAASwH,kBAE/G,eAACnH,EAAA,EAAKC,MAAN,CAAYZ,MAAM,IAAlB,UACI,yCACA,cAACiH,EAAA,EAAD,CAAOC,KAAK,SAAS5G,MAAOgF,EAAUyC,iBAtCc,SAACX,GAC9C,kBAAb9B,IACG,YAAV8B,EAAE5D,IACD+B,GAAY,SAAAyC,GAAC,OAAIC,EAAaD,EAAG,MAChB,cAAVZ,EAAE5D,IACT+B,GAAY,SAAAyC,GAAC,OAAIC,EAAaD,GAAI,MAEjCjG,QAAQC,IAAIoF,EAAE5D,OA+BwE0E,QA5B5B,SAACd,GAChErF,QAAQC,IAAIoF,EAAEe,OAAQf,EAAEgB,WACxB7C,GAAY,SAAAyC,GAAC,OAAIC,EAAaD,EAAGZ,EAAEe,OAAS,EAAI,GAAK,OA0BgEE,cAAc,QAAQC,MAAM,aAIrI,cAAC,IAAD,CAAMC,KAAI,UAAKC,gBAAL,UAAV,2CAQdP,EAAe,SAACD,EAAuBS,GAAxB,MACJ,kBAANT,EAAiBA,EAAI3D,KAAKqE,IAAIV,EAAIS,EAAQ,I,SC/LxCE,EAAuD,SAACjI,GAAW,IAAD,EACpEP,EAAiBO,EAAjBP,KAAMgF,EAAWzE,EAAXyE,QAGb,OACI,eAACxE,EAAA,EAAD,WACI,eAACA,EAAA,EAAK2G,MAAN,CAAYC,OAAO,QAAnB,UACA,cAAC5G,EAAA,EAAKC,MAAN,UACI,cAACgI,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS3I,EAAKR,SAAU2I,MAAM,WAAWS,SAAiC,SAAtB5I,EAAa+G,KAAiBC,SAAU,SAACS,EAAGC,GAAJ,OAAU1C,EAAQ,YAAC,eAAIhF,GAAN,IAAYR,WAAYkI,EAAEiB,gBAE5J,cAACnI,EAAA,EAAKC,MAAN,UACI,cAACgI,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS3I,EAAKP,KAAM0I,MAAM,OAAOnB,SAAU,SAACS,EAAGC,GAAJ,OAAU1C,EAAQ,YAAC,eAAIhF,GAAN,IAAYP,OAAQiI,EAAEiB,mBAGvG,cAACnI,EAAA,EAAKC,MAAN,UAEI,cAACgI,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS3I,EAAK6I,QAASD,UAAQ,EAACT,MAAM,cAE3D,eAAC3H,EAAA,EAAKC,MAAN,WAEI,6CAGA,eAACD,EAAA,EAAK2G,MAAN,CAAYC,OAAO,QAAnB,UACJ,cAAC5G,EAAA,EAAKC,MAAN,UAEI,cAACgI,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS3I,EAAK8I,kBAAmBF,UAAQ,EAACT,MAAM,iBAEjE,cAAC3H,EAAA,EAAKC,MAAN,UACA,cAACgI,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS3I,EAAK+I,gBAAiBH,UAAQ,EAACT,MAAM,qBAOnE,eAAC3H,EAAA,EAAKC,MAAN,WACI,8CACA,cAACqG,EAAA,EAAD,CAAOC,KAAK,QAAQiC,IAAI,IAAIT,IAAI,MAAMpI,MAAK,UAAEH,EAAKT,iBAAP,QAAoB,IAAKyH,SAAU,SAACS,EAAGC,GAAJ,OAAU1C,EAAQ,YAAC,eAAIhF,GAAN,IAAYT,UAAWoG,SAAS+B,EAAEvH,MAAO,iB,4HCvB3I8I,EAAoC,CAAC,cAAe,aAAc,QAAS,YAAa,WCd/FC,EAAsD,CACxDC,YAAa,SACb,aAAc,OACdC,MAAO,OACPC,UAAW,SACXxG,QAAS,SAGAyG,EAAkF,SAAC/I,GAC5F,IAAQgJ,EAA0BhJ,EAA1BgJ,SAAUC,EAAgBjJ,EAAhBiJ,YAElB,EAA0B1I,qBAA1B,mBAAO+C,EAAP,KAAc4F,EAAd,KACA,EAAwC3I,mBAAS,IAAjD,mBAAO4I,EAAP,KAAqBC,EAArB,KACA,EAAoC7I,mBAAS,GAA7C,mBAAO8I,EAAP,KAAmBC,EAAnB,KACA,EAA4B/I,mBAAS,IAArC,mBAAOyG,EAAP,KAAeuC,EAAf,KAGMC,EAAWjE,mBAAQ,kBAAMyD,EAASpG,KAAI,SAAAoD,GAAC,OAAIA,EAAEF,YAAS,CAACkD,IAE7D,EAAoCzI,mBAASmI,GAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAEA1I,qBAAU,WACN,sBAAC,8BAAA6E,EAAA,sEAC0B8D,MAAM,qBAAsB,CAACC,OAAQ,QAD/D,cACSC,EADT,gBAE0BA,EAASC,OAFnC,QAESC,EAFT,QAGWC,MAAMC,SAAQ,SAAAjE,GACd0C,EAAkBzC,SAASD,EAAEkE,WAC7B7I,QAAQ8I,KAAR,qDAA2DnE,EAAEF,OAA7D,eAA0EE,EAAEkE,SAA5E,oCAGRhB,EAASa,EAAQC,OARpB,0CAAD,KAUD,IAEH,IAAMI,EAAiB,SAACF,GAAD,OAA+E,SAAChD,EAAD,OJrCjDmD,EAASC,EIqC6ClC,EAAL,EAAKA,QAAL,OJrCjDiC,EIqCiGH,EJrCxFI,IIqCoGlC,EAA3BsB,GJrC/C,SAAAM,GAAK,4BAAQA,EAAMjE,QAAO,SAAAvG,GAAC,OAAIA,IAAM6K,MAAhC,YAA2CC,EAAW,CAACD,GAAQ,UI6CtJE,EAAgBhF,mBAAQ,kBAAM,OAACjC,QAAD,IAACA,IAAS,IAAIyC,QAAO,SAAAC,GAAC,OACrDwD,EAASvD,SAASD,EAAEF,SACrB2D,EAAWxD,SAASD,EAAEkE,WACtBlE,EAAEF,OAAOO,cAAcJ,SAASe,QACjC,CAAC1D,EAAOmG,EAAYzC,EAAQwC,IACzBgB,EAAgBjF,mBAAQ,kBAAM,OAACjC,QAAD,IAACA,IAAS,IAAIyC,QAAO,SAAAC,GAAC,OAAIwD,EAASvD,SAASD,EAAEF,aAAU,CAACxC,EAAOkG,IAC9FiB,EAAYlF,mBAAQ,kBAAM5B,KAAKC,KAAK2G,EAAc7K,OAASyJ,KAAe,CAACoB,EAAepB,IAE1FuB,EAAiB,SAACvJ,EAAeqI,GAAhB,OAAsCP,GAAY,SAAA0B,GAAG,4BAAQA,EAAI5E,QAAO,SAAA6E,GAAE,OAAIA,EAAG9E,SAAW3E,EAAK2E,WAA5C,YAAyD0D,EAAW,CAACrI,GAAQ,SAEzJ,OACI,qCACA,eAAC0J,EAAA,EAAD,CAASC,SAAS,MAAMC,SAAUzH,EAAlC,UACQ,8BACI,cAACiD,EAAA,EAAD,CAAOC,KAAK,OAAOwE,YAAY,kBAAkBC,OAAK,EAACrL,MAAOoH,EAAQP,SAAU,SAACC,GAAD,OAAO6C,EAAU7C,EAAEC,OAAO/G,MAAMyG,oBAEpH,cAAC6E,EAAA,EAAD,IACA,8BACI,eAACC,EAAA,EAAD,CAAMtE,OAAO,QAAQuE,WAAS,EAACC,QAAU3C,EAAkBhJ,OAAS,EAApE,UACI,cAACyL,EAAA,EAAKG,OAAN,CAAahM,MAAM,IAAnB,SACA,mDAGHoJ,EAAkB9F,KAAI,SAAAsH,GAAQ,OAC3B,cAACiB,EAAA,EAAKG,OAAN,UACI,cAACpD,EAAA,EAAD,CAAUqD,UAAU,cAAc3D,MAAOsC,EAAU9B,QAASqB,EAAWxD,SAASiE,GAAWzD,SAAU2D,EAAeF,MADrGA,cAQ/B,cAACsB,EAAA,EAAD,CAAOV,UAAQ,EAACW,SAAO,EAAvB,SACI,eAACD,EAAA,EAAME,KAAP,WACI,eAACF,EAAA,EAAMG,IAAP,WACI,cAACH,EAAA,EAAMI,WAAP,wBACA,cAACJ,EAAA,EAAMI,WAAP,OAEHpB,EAAc9K,OAAS,EACpB8K,EAAc5H,KAAI,SAAAoD,GAAC,OAAI,cAAC,EAAD,CAA6BwD,SAAUA,EAASvD,SAASD,EAAEF,QAAS+F,SAAU,SAACzD,GAAD,OAAasC,EAAe1E,GAAG,IAAQ7E,KAAM6E,GAAxGA,EAAEF,WAE5C,eAAC0F,EAAA,EAAMG,IAAP,WACI,cAACH,EAAA,EAAMM,KAAP,IACA,cAACN,EAAA,EAAMM,KAAP,IAEA,cAACN,EAAA,EAAMM,KAAP,gCACA,cAACN,EAAA,EAAMM,KAAP,IACA,cAACN,EAAA,EAAMM,KAAP,OAKR,eAACN,EAAA,EAAMG,IAAP,WACI,cAACH,EAAA,EAAMI,WAAP,UAAmB,SACnB,cAACJ,EAAA,EAAMI,WAAP,OAEHtI,GAASiH,EAAcxE,QAAO,SAACmB,EAAG1H,GAAJ,OAAUA,GAAK2J,GAAgBE,EAAW,IAAM7J,EAAI2J,EAAeE,KAAYzG,KAAI,SAACoD,EAAGxG,GAAJ,OAC9G,cAAC,EAAD,CAA6BgK,SAAUA,EAASvD,SAASD,EAAEF,QAAS+F,SAAU,SAACzD,GAAD,OAAasC,EAAe1E,GAAG,IAAO7E,KAAM6E,GAAvGA,EAAEF,gBAOrC,cAAC+E,EAAA,EAAD,CAASC,SAAS,SAAlB,SACI,eAACK,EAAA,EAAD,WACI,eAACA,EAAA,EAAKG,OAAN,CAAaS,cAAc,SAASzM,MAAM,KAA1C,UACI,2CAAqB,uBACrB,cAAC0M,EAAA,EAAD,CAAYC,cAAe,EAAGC,aAAc,EAAG7C,WAAYA,EAAY8C,WAAY1B,EAAW2B,aAAc,SAAClF,EAAGC,GAAJ,OAAUmC,EAAcnC,EAAEkC,WAAagD,OAAOlF,EAAEkC,YAAc,SAE9K,cAAC8B,EAAA,EAAKG,OAAN,CAAaS,cAAc,SAASzM,MAAM,IAA1C,SAEI,eAACiH,EAAA,EAAD,CAAQ0E,OAAK,EAACtD,cAAc,QAASnB,KAAK,SAAS5G,MAAOuJ,EAAc1C,SAAU,SAACC,EAAGS,GAAJ,OAAUiC,EAAgB1C,EAAEC,OAAO2F,gBAArH,UAEhB,0BACA,eAACC,EAAA,EAAD,CAAOhB,UAAU,gBAAgBiB,OAAK,EAAtC,gBAA0C,iCAASjC,EAAc7K,0BAY/D+M,EAAqG,SAAC,GAAgC,IAA/BtL,EAA8B,EAA9BA,KAAMqI,EAAwB,EAAxBA,SAAUqC,EAAc,EAAdA,SAElH3B,EAA8B/I,EAA9B+I,SAAUpE,EAAoB3E,EAApB2E,OAAQ4G,EAAYvL,EAAZuL,SAEzB,OACI,eAAClB,EAAA,EAAMG,IAAP,WACgB,cAACH,EAAA,EAAMM,KAAP,CAAYxM,MAAM,IAAlB,SACZ,cAAC4I,EAAA,EAAD,CAAU7F,MAAO,GAAI8F,QAAM,EAACC,QAASoB,EAAU/C,SAAU,SAACS,EAAGC,GAAJ,OAAU0E,IAAW1E,EAAEiB,cAEhF,cAACoD,EAAA,EAAMM,KAAP,UAEI,cAACa,EAAA,EAAD,UACK7G,MAIT,cAAC0F,EAAA,EAAMM,KAAP,UACA,cAAC,EAAD,CAAa/G,KAAK,OAAO5D,KAAMA,MAG/B,cAACqK,EAAA,EAAMM,KAAP,UAEQ,wBAAOc,MAAOF,EAASG,KAAK,MAA5B,UAAoCH,EAAShN,OAA7C,mBAEP,cAAC8L,EAAA,EAAMM,KAAP,UACD,cAACS,EAAA,EAAD,CAAOhB,UAAU,cAAcnL,QAAS8J,EAAUnF,KAAK,OAAOhG,MAAO4J,EAAcuB,WAUzF4C,EAAuD,SAAC,GAAkB,IAAjB3L,EAAgB,EAAhBA,KAAM4D,EAAU,EAAVA,KAuBjE,OArBA/D,qBAAU,WACN,IAAM+L,EAAe5L,EAAKuL,SAAS9J,KAAI,SAAAC,GACnC,IAAMmK,EAAS,IAAIC,IAAI9L,EAAK+L,MAAMrK,IAClCmK,EAAOG,SAAW9J,SAAS+J,SAASD,SACpC,IAAME,EAAW,IAAIC,SAASnM,EAAK2E,OAAlB,cAAiCkH,EAAjC,MAMjB,OALA3L,QAAQC,IAAR,wBAA6BH,EAAK2E,OAAlC,cAA8CjD,EAA9C,kBAAyDmK,IACzDK,EAASE,OAAOC,MAAK,SAAAC,GACjBpM,QAAQC,IAAR,kBAAuBH,EAAK2E,OAA5B,sBAAgDjD,EAAhD,MACAQ,SAASC,MAAMoK,IAAID,MAEhBJ,KAGX,OAAO,WACHN,EAAa9C,SAAQ,SAAAoD,GACjBhM,QAAQC,IAAR,qBAA0B+L,EAASvH,OAAnC,eAAgDuH,EAASM,gBAAzD,eAA+EN,EAAShL,MAAxF,MACAgB,SAASC,MAAMsK,OAAOP,SAG/B,CAAClM,EAAK2E,OAAQ3E,EAAKuL,SAAUvL,EAAK+L,QAGjC,qBAAK7K,MAAO,CAACwL,WAAY1M,EAAK2E,OAAQlB,SAAUG,GAAhD,yCCvLF+I,EAAe,CAAEC,UAAW,EAAIC,aAAc,EAAIC,WAAY,EAAIC,YAAa,GAC/EC,EAAiC,CAAC,aACpCrL,IAAK,KAAM0D,KAAM,OAAQzD,KAAM,SAAU5B,KAAM,mBAAsB2M,GADlC,aAEnChL,IAAK,KAAM0D,KAAM,OAAQzD,KAAM,kBAAmB5B,KAAM,mBAAsB2M,GAF3C,aAGnChL,IAAK,KAAM0D,KAAM,QAASlG,MAAO,kBAAqBwN,GAHnB,aAInChL,IAAK,KAAM0D,KAAM,OAAQzD,KAAM,QAAS5B,KAAM,mBAAuB2M,IAmH1DM,MAhHf,WAAgB,IAAD,EAEb,EAA0B7N,mBAA0B4N,GAApD,mBAAOnE,EAAP,KAAcqE,EAAd,KACA,EAA0B9N,qBAA1B,mBAAO+N,EAAP,KAAcC,EAAd,KACA,EAAgChO,mBAAoB,IAApD,mBAAOyI,EAAP,KAAiBC,EAAjB,KAEA,EAAoC1I,mBAAiB,WAArD,mBAAOiO,EAAP,KAAmBC,EAAnB,KACA,EAAoClO,mBAAiB,WAArD,mBAAOmO,EAAP,KAAmBC,EAAnB,KAEMC,EAAuCrJ,mBAAQ,iBAAY,EAALsJ,EAAoDzJ,SAASsJ,EAAWzL,UAAU,GAAI,MAA1E,GAAM,IAAO4L,GAAK,EAAK,IAAU,IAAJA,GAAzC,IAAAA,IAA4F,CAACH,IAEzJ,EAAwCnO,mBAA+B,MAAvE,mBAAOuO,EAAP,KAAqBC,EAArB,KAEMC,EAAa,SAACC,GAAD,OACjBZ,GAAS,SAAApN,GAAO,OAAIA,EAAQ2B,KAAI,SAAApD,GAAC,OAAIA,EAAEsD,MAAQmM,EAAQnM,IAAMmM,EAAUzP,SAKzE,OACE,qBAAK+L,UAAU,MAAf,SACE,eAAC2D,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAAC,IAAD,CAAMtH,KAAI,UAAKC,gBAAL,UAAV,SACE,cAACsH,EAAA,EAAD,CAAUhP,QAAQ,YAEpB,cAAC,IAAD,CAAMyH,KAAI,UAAKC,gBAAL,UAAV,SACE,cAACsH,EAAA,EAAD,CAAUhP,QAAQ,YAEpB,cAAC,IAAD,CAAMyH,KAAI,UAAKC,gBAAL,YAAV,SACE,cAACsH,EAAA,EAAD,CAAUhP,QAAQ,iBAIxB,cAAC,IAAD,CAAOiP,KAAI,UAAKvH,gBAAL,YAAX,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAOuH,KAAI,UAAKvH,gBAAL,UAAX,SACE,cAAC,EAAD,CAAWkB,SAAUA,EAAUC,YAAaA,MAG9C,eAAC,IAAD,CAAOoG,KAAI,UAAKvH,gBAAL,UAAX,UACE,cAAC,GAAD,CAAYkB,SAAUA,EAAUsG,QAAS,SAAC5I,GAAD,OAAc6H,EAAS,CAAC3B,MAAO,qBAAsB2C,QAAO,OAAE7I,QAAF,IAAEA,OAAF,EAAEA,EAAG6I,aAI5G,eAAC1E,EAAA,EAAD,WACE,eAAC8B,EAAA,EAAD,0BACE,qBAAKtK,MAAO,CAACmN,MAAO,SAApB,SAA8B,wCAC9B,uBAAOhJ,KAAK,QAAQ5G,MAAO4O,EAAY/H,SAAU,SAAAC,GAAC,OAAI+H,EAAc/H,EAAEC,OAAO/G,eAE3E,qBAAKyC,MAAO,CAACmN,MAAO,SAApB,SAA8B,wCAChC,uBAAOhJ,KAAK,QAAQ5G,MAAO8O,EAAYjI,SAAU,SAAAC,GAAC,OAAIiI,EAAcjI,EAAEC,OAAO/G,kBAKhF0O,GAAU,mCAAQ,iCAASA,EAAM1B,QAAe,wCAAM0B,EAAMiB,eAAZ,QAAwB,qBACzE,qBAAKlN,MAAO,CAACoN,UAAW,UAAUC,UAAW,OAAQlB,WAAY,UAAWmB,QAAS,OAAQC,UAAW,+BAAxG,SACA,sBAAKvN,MAAO,CAACC,QAAS,OAAQuN,cAAe,MAAOC,WAAY,aAActB,WAAYA,EAAYlP,MAAO,cAAesQ,UAAW,yBAAvI,UAEG5F,EAAMpH,KAAI,SAAAyH,GAAI,OACf,eAAC0F,EAAA,EAAD,CAAsBC,GAAG,QAAQC,SAAS,eAAeC,OAAQ,kBAAMnB,EAAgB1E,IAAO8F,QAAS,kBAAMpB,EAAgB,OAAOqB,QAClI,sBAAK7E,UAAS,qBAA2B,OAAZuD,QAAY,IAAZA,OAAA,EAAAA,EAAchM,OAAQuH,EAAKvH,IAAI,YAAY,IAAxE,UACE,qBAAKyI,UAAU,cAED,SAAdlB,EAAK7D,KAAkB,cAAC,EAAD,CAAU/G,KAAM4K,EAAMtL,MAAO6P,IACtC,UAAdvE,EAAK7D,KAAmB,cAAC,EAAD,CAAW/G,KAAM4K,EAAOtL,MAAO6P,IACvD,+CAEA,qBAAKrD,UAAU,iBARnB,UAWE,cAAC,EAAD,CAAiB9L,KAAM4K,EAAM5F,QAASuK,IACvB,SAAd3E,EAAK7D,MAAmB,cAAC,EAAD,CAAgB/G,KAAM4K,EAAM5F,QAASuK,IAC/C,UAAd3E,EAAK7D,MAAoB,cAAC,EAAD,CAAiB/G,KAAM4K,EAAM5F,QAASuK,MAbtD3E,EAAKvH,QAoBnB,qBAAKT,MAAO,CAACgO,KAAM,OAAQC,QAAS,GAAKC,UAAW,UAAWjO,QAAS,QAAxE,SACE,cAACyN,EAAA,EAAD,CAAOC,GAAG,QAAQI,QAAS,cAACjQ,EAAA,EAAD,CAAQqQ,KAAK,OAAOhE,OAAK,EAACnK,MAAO,CAACuN,UAAW,OAAQa,OAAQ,GAAI1L,KAAK,YAAjG,SACE,cAAC,GAAD,CAAgB2L,MAAO,SAACrG,GAAD,OAAUgE,GAAS,SAAArE,GAAK,4BAAQA,GAAR,CAAeK,+BA6BlEsG,GAA6D,SAAC,GAAa,IAAZD,EAAW,EAAXA,MAEnE,EAAwBnQ,mBAAyB,QAAjD,mBAAOiG,EAAP,KAAaoK,EAAb,KACA,EAA0BrQ,mBAAS,IAAnC,mBAAOX,EAAP,KAAciR,EAAd,KAEM/N,EAAMyC,mBAAQ,kBAAM,IAAKuL,MAAOC,UAAUC,QAAQ,KAAI,IAEtDC,EAA6B1L,mBAAQ,iBAAc,UAATiB,EAAA,yBACzCA,OAAM1D,OAASgL,GAD0B,IACXxN,MAAOV,IADI,yBAEzC4G,OAAM1D,OAASgL,GAF0B,IAEX/K,KAAMnD,EAAOuB,KAAM,sBACtD,CAACqF,EAAM5G,EAAOkD,IAEhB,OACE,eAAC7C,EAAA,EAAD,CAAMiR,SAAU,kBAAMR,EAAMO,IAAc5O,MAAO,CAACqB,SAAU,SAA5D,UACE,eAACzD,EAAA,EAAK2G,MAAN,CAAYC,OAAO,QAAnB,UACE,cAAC5G,EAAA,EAAKC,MAAN,UACF,cAACiR,EAAA,EAAD,CAAOvJ,MAAM,OAAOQ,QAAkB,SAAT5B,EAAiBC,SAAU,kBAAMmK,EAAQ,aAGpE,cAAC3Q,EAAA,EAAKC,MAAN,UACF,cAACiR,EAAA,EAAD,CAAOvJ,MAAM,QAAQQ,QAAkB,UAAT5B,EAAkBC,SAAU,kBAAMmK,EAAQ,iBAIxE,eAAC3Q,EAAA,EAAK2G,MAAN,CAAYC,OAAO,QAAnB,UACE,cAAC5G,EAAA,EAAKC,MAAN,CAAYZ,MAAO,GAAnB,SACF,cAACiH,EAAA,EAAD,CAAOC,KAAK,OAAOyE,OAAK,EAACD,YAAsB,SAATxE,EAAkB,gBAAkB,cAAe5G,MAAOA,EAAO6G,SAAU,SAAAC,GAAC,OAAImK,EAASnK,EAAEC,OAAO/G,YAEtI,cAACK,EAAA,EAAKC,MAAN,CAAYZ,MAAO,EAAnB,SACF,cAACa,EAAA,EAAD,CAAQqG,KAAK,SAASpG,QAAQ,iBAO9BgR,GAAiB,WAAO,IAAD,EAE3B,EAA0DC,cAAlDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAA2BC,EAA7C,EAAgCC,UAAaD,OAC7C,EAAsCjR,qBAAtC,mBAAOmR,EAAP,KAAoBC,EAApB,KACA,EAA0BpR,qBAA1B,mBAAO+N,EAAP,KAAcC,EAAd,KAEAvN,qBAAU,WACL4Q,OAAOjP,OAAO6O,GAAQK,OAAM,SAAAhP,GAAC,OAAKA,OAEpC,CAAC2O,IAEJ,IAAMM,EAAkB,SAACpL,GACvBrF,QAAQC,IAAR,aAA0BoF,EAAEC,SAGxBoL,EAAqB,SAACrL,GAC1BrF,QAAQC,IAAR,gBAA6BoF,EAAEC,SAGjC3F,qBAAU,WACR,GAAI0Q,EAGJ,OAFAA,EAAY1P,iBAAiB,UAAW8P,GACxCJ,EAAY1P,iBAAiB,aAAc+P,GACpC,WACLL,EAAYzP,oBAAoB,UAAW6P,GAC3CJ,EAAYzP,oBAAoB,aAAc8P,MAE/C,CAACL,IAEJ,IAAMM,EAAW,uCAAG,sBAAAnM,EAAA,0FAAH,qDAyBXoM,EAAS,uCAAG,WAAOhL,GAAP,eAAApB,EAAA,+EAEKqM,UAAUC,OAAOC,cAFtB,cAERC,EAFQ,OAGdhR,QAAQC,IAAI,QAAZ,eAAyB+Q,IACzBhR,QAAQC,IAAI,QAAS+Q,EAAKC,WAC1BX,EAAeU,GALD,SAMRA,EAAKE,KAAK,CAACC,SAAUvL,EAAQuL,WANrB,OAOdnR,QAAQC,IAAI,sBACZD,QAAQC,IAAI,QAAS+Q,EAAKC,WARZ,kDAUdjR,QAAQiN,MAAR,MACAC,EAAS,CAAC3B,MAAM,8BAAgC2C,QAAO,OAAC,EAAD,yBAAE,KAAYA,UAXvD,0DAAH,sDAgBf,OACE,eAACkD,EAAA,EAAD,CAAMxH,OAAK,EAAX,UACM,eAACwH,EAAA,EAAK9F,OAAN,CAAatK,MAAO,CAACsN,QAAS,QAA9B,UACJ,cAACxP,EAAA,EAAD,CAAQuS,QAAQ,QAAQ3T,MAAM,SAASgG,KAAK,OAAO4N,QAAS,kBAAMX,KAAlE,0BACI,cAACrF,EAAA,EAAD,CAAQ+F,QAAQ,OAAhB,sCAGA,cAACD,EAAA,EAAKG,QAAN,UAEJ,eAAC3S,EAAA,EAAD,CAAMiR,SAAUK,EAAaU,GAA7B,UACA,eAAChS,EAAA,EAAK2G,MAAN,CAAYC,OAAO,QAAnB,UACE,eAAC5G,EAAA,EAAKC,MAAN,WACA,+CACE,cAAC4G,EAAA,EAAD,aAAUC,WAAS,EAACE,QAASvE,EAAa,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,UAAWmQ,aAAa,QAAWvB,EAAS,iBAK7J,eAACrR,EAAA,EAAKC,MAAN,WACA,+CAGE,cAAC4G,EAAA,EAAD,aAAUC,WAAS,EAACE,QAASvE,EAAa,IAAI,IAAI,IAAI,IAAI,KAAMmQ,aAAa,KAAQvB,EAAS,iBAEhG,eAACrR,EAAA,EAAKC,MAAN,WACA,kDAGE,cAAC4G,EAAA,EAAD,aAAUC,WAAS,EAACE,QAASvE,EAAa,OAAQ,YAAamQ,aAAa,QAAWvB,EAAS,oBAElG,eAACrR,EAAA,EAAKC,MAAN,WACA,4CAGE,cAAC4G,EAAA,EAAD,aAAUgM,WAAS,EAAC/L,WAAS,EAACE,QAASvE,EAAa,OAAO,MAAM,OAAO,OAAO,SAAUmQ,aAAa,IAAOvB,EAAS,eAExH,eAACrR,EAAA,EAAKC,MAAN,WACA,+CAGE,cAAC4G,EAAA,EAAD,aAAUgM,WAAS,EAAC/L,WAAS,EAACE,QAASvE,EAAa,IAAK,MAAO,KAAMmQ,aAAa,IAAOvB,EAAS,oBAIvG,cAACnR,EAAA,EAAD,CAAQqG,KAAK,SAASpG,QAAQ,YAE7BkO,GAAU,mCAAQ,iCAASA,EAAM1B,QAAe,wCAAM0B,EAAMiB,eAAZ,QAAwB,8BAYzEwD,GAAiF,SAAC,GAAyB,IAAxB/J,EAAuB,EAAvBA,SAAUsG,EAAa,EAAbA,QAEjG,EAA8B/O,oBAAS,GAAvC,mBAAOwK,EAAP,KAAgBiI,EAAhB,KA6BA,OA3BAhS,qBAAU,WACN,IAAM+L,EAAe/D,EAASiK,SAAQ,SAAA9R,GAAI,OAAIA,EAAKuL,SAAS9J,KAAI,SAAAC,GAC5D,IAAMmK,EAAS,IAAIC,IAAI9L,EAAK+L,MAAMrK,IAClCmK,EAAOG,SAAW9J,SAAS+J,SAASD,SACpC,IAAME,EAAW,IAAIC,SAASnM,EAAK2E,OAAlB,cAAiCkH,EAAjC,MAEjB,OADA3L,QAAQC,IAAR,wBAA6BH,EAAK2E,OAAlC,cAA8CjD,EAA9C,kBAAyDmK,IAClDK,QAaX,OAVA6F,QAAQC,IAAIpG,EAAanK,IAAb,uCAAiB,WAAM6K,GAAN,SAAA5H,EAAA,+EAEnB4H,EAAGF,OAFgB,OAGzBlM,QAAQC,IAAR,kBAAuBmM,EAAG3H,OAA1B,OACAzC,SAASC,MAAMoK,IAAID,GAJM,gDAMzB6B,EAAQ,EAAD,IANkB,yDAAjB,wDAQR9B,MAAK,kBAAMwF,GAAW,MAEnB,WACHjG,EAAa9C,SAAQ,SAAAoD,GACjBhM,QAAQC,IAAR,qBAA0B+L,EAASvH,OAAnC,eAAgDuH,EAASM,gBAAzD,eAA+EN,EAAShL,MAAxF,MACAgB,SAASC,MAAMsK,OAAOP,SAG/B,CAACrE,EAAUsG,IAGV,cAAC8D,EAAA,EAAD,CAAQC,OAAQtI,KC5TPuI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhG,MAAK,YAAkD,IAA/CiG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHRO,GAA0C,QAA5BhM,gJAAYiM,YAAwBC,IAAMC,WAAaD,IAAME,SAEjFC,IAASC,OACP,cAACN,GAAD,UACE,cAAC,EAAD,MAEFzQ,SAASgR,eAAe,SAM1Bf,O","file":"static/js/main.24559e46.chunk.js","sourcesContent":["import { TextItemData } from \"./TextItem\";\nimport { ImageItemData } from \"./ImageItem\";\n\nexport const BUFFER_HEIGHT = 128;\nexport const PRINT_MARGIN = 30;\nexport const USABLE_HEIGHT = BUFFER_HEIGHT - (PRINT_MARGIN * 2);\n\nexport const color_fg = [0, 0, 0, 255];\nexport const color_bg = [255, 255, 255, 0];\n\n\nexport type LabelItemData = TextItemData | ImageItemData;\n\n\n\n\nexport const applyThreshold = (ctx: CanvasRenderingContext2D, color: [number, number, number], threshold?: number, inverted?: boolean, mask?: boolean) => {\n    if(typeof threshold === 'undefined') threshold = 128;\n\n    const pixels = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    for(let i = 0; i < pixels.data.length; i += 4) {\n        const alpha_above_thresh = pixels.data[i+3] > threshold;\n        const value = (pixels.data[i]+pixels.data[i+1]+pixels.data[i+2]) / 3;\n        const bright_below_thresh = value < threshold;\n\n        // First pass looks at pixel values and checks if they are beneath/above the threshold (depending on invertd)\n        const above_thresh = alpha_above_thresh && bright_below_thresh !== (!!inverted);\n\n        // Second pass inverts the threshold if masking\n        const alpha = (!!mask) !== above_thresh ? 255 : 0;\n\n        // const color = color_fg;\n\n        pixels.data[i + 0] = color[0];\n        pixels.data[i + 1] = color[1];\n        pixels.data[i + 2] = color[2];\n        pixels.data[i + 3] =  alpha; \n    }\n    ctx.putImageData(pixels, 0, 0);\n}\n\n\nexport const getImageDim = (dim: number | SVGAnimatedLength) => typeof dim === 'number' ? dim : dim.baseVal.value;\n\nexport interface ItemProps {\n    color: [number, number, number];\n}\n\nexport interface ItemData {\n    key: string;\n    threshold?: number;\n    inverted?: boolean;\n    mask?: boolean;\n    rotated?: boolean;\n    flippedHorizontal?: boolean;\n    flippedVertical?: boolean;\n    marginTop: number;\n    marginBottom: number;\n    marginLeft: number;\n    marginRight: number;\n}\n\nexport type ItemEditorProps<T> = { data: T, setData: (item: T) => void }","import { useEffect, useRef, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ItemProps, USABLE_HEIGHT, applyThreshold, ItemEditorProps, ItemData } from \"./common\";\n\nexport interface ImageItemData extends ItemData {\n    type: 'image';\n    image: string;\n}\n\nexport interface ImageItemProps extends ItemProps {\n    data: ImageItemData;\n}\n\n\n\nexport const ImageItemEditor: React.FC<ItemEditorProps<ImageItemData>> = (props) => {\n\n    return (\n        <>\n            <Form>\n                <Form.Field>\n                    <label>Image:</label>\n                    <Button content=\"Browse...\" />\n                </Form.Field>\n            </Form>\n        </>\n    )\n}\n\nexport const ImageItem: React.FC<ImageItemProps> = (props) => {\n    const {data} = props;\n    const {threshold, inverted, image} = props.data;\n    const [width, setWidth] = useState(200);\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n\n    const imgRef = useRef<HTMLImageElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    useEffect(() => {\n        const ctx = canvasRef.current?.getContext('2d');\n        if(!ctx) return;\n        if (!imgRef.current) return;\n        if (!imageLoaded) return;\n\n        if (imageError) {\n            ctx.canvas.width = 100;\n            setWidth(100);\n            ctx.font = '40px sans-serif';\n            ctx.fillText('😢', 20, 50);\n            console.log('No image :(')\n            return;\n        }\n\n        const imgWidth = imgRef.current.width;\n        const imgHeight = imgRef.current.height;\n\n        ctx.imageSmoothingEnabled = false;\n        // ctx.globalCompositeOperation\n\n\n        ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        const scaledWidth = imgWidth * (USABLE_HEIGHT / imgHeight);\n\n        if (scaledWidth !== width) {\n            ctx.canvas.width = scaledWidth;\n            ctx.canvas.height = USABLE_HEIGHT;\n            ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            setWidth(scaledWidth);\n            return;\n        }\n\n        ctx.drawImage(imgRef.current, 0, 0, scaledWidth,USABLE_HEIGHT);\n\n        if (width <= 0) return;\n\n        applyThreshold(ctx, props.color, threshold, inverted, data.mask)\n\n    }, [canvasRef, width, image, threshold, inverted, imageLoaded, props.color, data.mask, imageError]);\n\n    useEffect(()=> {\n        setImageLoaded(false);\n    }, [image]);\n\n    const handleImageError = () => {\n        setImageLoaded(true);\n        setImageError(true);\n    }\n\n    useEffect(() => {\n        const img = imgRef.current;\n        if(!img) return;\n        img.addEventListener('error', handleImageError);\n        return () => img.removeEventListener('error', handleImageError);\n    }, [imgRef])\n\n    return (\n        <>\n            <img ref={imgRef} src={image} crossOrigin=\"anonymous\" style={{display: 'none'}} alt=\"\" onLoad={()=>setImageLoaded(true)} />\n            <canvas ref={canvasRef} style={{imageRendering: 'pixelated', height: '140px'}} />\n        </>\n    )\n}","import { StateSetter } from \"./types\";\n\nexport const valueOptions = (...values: string[]) => values.map(v => ({key: v, value: v, text: v[0].toUpperCase()+v.substring(1) }));\n\nexport const updateIncluded = <T>(set: StateSetter<T[]>, item: T, included: boolean) => set(items => [...items.filter(i => i !== item), ...(included ? [item] : [])])","import { env } from \"process\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Dropdown, Form, Input } from \"semantic-ui-react\";\nimport { Link } from \"wouter\";\nimport { valueOptions } from \"../util\";\nimport { ItemProps, applyThreshold, ItemEditorProps, ItemData } from \"./common\";\n\n\nexport interface TextItemData extends ItemData {\n    type: 'text';\n    text: string;\n    font: string;\n}\nexport interface TextItemProps extends ItemProps {\n    data: TextItemData;\n}\n\nconst defaultFonts = [\n    // 'otsutome_font'\n    'serif',\n    'sans-serif',\n    'monospace'\n];\n\nconst guiFonts = [\n    'Rating',\n    'Step',\n    'outline-icons',\n    'Icons',\n    'Checkbox',\n    'Dropdown',\n    'brand-icons',\n    'Accordion'\n];\n\nexport const TextItem: React.FC<TextItemProps> = (props) => {\n    const {text, font, threshold, inverted} = props.data;\n    const [width, setWidth] = useState(200);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const ctx = canvasRef.current?.getContext('2d');\n        if(!ctx) return;\n\n        ctx.imageSmoothingEnabled = false;\n        // ctx.globalCompositeOperation\n\n        try {\n            if (!document.fonts.check(font)) return;\n        }\n        catch {\n            return;\n        }\n\n        // ctx.fillStyle = inverted ? 'white' : 'black';\n        ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        ctx.font = font;\n        \n        const textRect = ctx.measureText(text);\n        const minWidth = Math.ceil(textRect.width);\n        if (ctx.canvas.width !== minWidth) {\n            //setTimeout(() => {\n\n                console.log(textRect.width, '!=', width, ctx.canvas.width, minWidth, `(${text}) FONT: ${font}`);\n                \n                ctx.canvas.width = minWidth;\n                // ctx.canvas.height = USABLE_HEIGHT;\n                ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height);\n                \n                setWidth(minWidth);\n                return;\n           // }, 1000);\n        }\n\n        const textHeight = textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent + textRect.fontBoundingBoxDescent;\n        const verticalOffset = (ctx.canvas.height - textHeight) / 2;\n        \n        \n        ctx.fillText(text, 0, verticalOffset + textRect.actualBoundingBoxAscent + textRect.fontBoundingBoxDescent, width);\n\n        if (width <= 0) return;\n\n        applyThreshold(ctx, props.color, threshold, false, props.data.mask);\n\n        \n        if(env.NODE_ENV === 'development') {\n            ctx.moveTo(0, verticalOffset);\n            ctx.lineTo(width, verticalOffset);\n            ctx.moveTo(0, verticalOffset + textRect.fontBoundingBoxDescent);\n            ctx.lineTo(width, verticalOffset + textRect.fontBoundingBoxDescent);\n\n            ctx.moveTo(0, verticalOffset + textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent);\n            ctx.lineTo(width, verticalOffset + textRect.fontBoundingBoxAscent + textRect.fontBoundingBoxDescent);\n\n            ctx.moveTo(0, verticalOffset + textHeight);\n            ctx.lineTo(width, verticalOffset + textHeight);\n            ctx.strokeStyle = \"#ff000030\";\n            ctx.stroke();\n        }\n\n    }, [canvasRef, width, text, font, threshold, inverted, props.color, props.data.mask]);\n\n\n    return (\n        <canvas ref={canvasRef} style={{imageRendering: 'pixelated', height: '140px'}} />\n    )\n}\n\nexport const TextItemEditor: React.FC<ItemEditorProps<TextItemData>> = (props) => {\n\n    const {data, setData} = props;\n    const [fontName, setFontName] = useState<string>();\n    const [fontSize, setFontSize] = useState<number>();\n\n    useEffect(() => {\n        // console.log('Font changed: ', data.font);\n\n        const [size, name] = data.font.split(' ');\n        if(!fontName) setFontName(name);\n\n        const match = /([0-9]+)(.*)/.exec(size);\n        if (match && !fontSize) {\n            const parsedSize = parseInt(match[1]);\n            setFontSize(parsedSize);\n        }\n\n    }, [data.font, fontName, fontSize]);\n\n    useEffect(() => {\n        if(!fontName || !fontSize) return;\n        const fontString = `${fontSize}px ${fontName}`;\n        if(data.font === fontString) return;\n\n        setData({...data, font: fontString});\n    }, [fontName, fontSize, data, setData])\n    \n\n    // const bumpFontSize = (amt: number) => {\n\n    //     if(match && match.length === 3) {\n    //         parts[0] = `${parseInt(match[1]) + amt}${match[2]}`;\n    //         setFont(parts.join(' '));\n    //     }\n    // }\n\n    const handleFontKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        if(typeof fontSize !== 'number') return;\n        if(e.key === 'ArrowUp') {\n            setFontSize(s => bumpFontSize(s, 1));\n        } else if (e.key === 'ArrowDown') {\n            setFontSize(s => bumpFontSize(s, -1));\n        }\n        else console.log(e.key);\n    }\n\n    const handleFontWheel: React.WheelEventHandler<HTMLInputElement> = (e) => {\n        console.log(e.deltaY, e.deltaMode);\n        setFontSize(s => bumpFontSize(s, e.deltaY < 0 ? 1 : -1));\n    }\n\n    const fontOptions = useMemo(() => {\n        const documentFonts = new Set(Array.from(document.fonts.entries()).map(([a, b]) => a.family).filter(f => !guiFonts.includes(f)));\n        const fonts = [...defaultFonts, ...documentFonts].sort((a, b) => ((al, bl) =>  al < bl ? -1 : al > bl ? 1 : 0)(a.toLowerCase(), b.toLowerCase()));\n        return valueOptions(...fonts)\n    }, []);\n\n    return (\n        <>\n\n            <Form style={{minWidth: '400px'}}>\n\n            <Form.Field>\n                    <label>Text</label>\n                    <Input type=\"text\" value={data.text} onChange={e => setData({...data, text: e.target.value})} />\n                </Form.Field>\n\n                <Form.Group widths='equal'>\n                    <Form.Field>\n                        <label>Font</label>\n                        <Dropdown selection search value={fontName} options={fontOptions} onChange={(_, d) => setFontName(d.value?.toString()) }  />\n                    </Form.Field>\n                    <Form.Field width='6'>\n                        <label>Size</label>\n                        <Input type='number' value={fontSize} onKeyDownCapture={handleFontKeyDown} onWheel={handleFontWheel} labelPosition=\"right\" label='px' />\n                    </Form.Field>\n\n                </Form.Group>\n                    <Link href={`${process.env.PUBLIC_URL}/fonts`}>Add additional fonts...</Link>\n\n\n            </Form>\n        </>\n    )\n}\n\nconst bumpFontSize = (s: number | undefined, amount: number): number | undefined => \n    typeof s !== 'number' ? s : Math.max(s + amount, 1);\n\n","import React from \"react\";\nimport { Checkbox, Form, Input } from \"semantic-ui-react\";\nimport { ItemData, ItemEditorProps } from \"./common\";\n\n// type GenericItemProps = ItemProps & {type: any, image?: any, text?: any};\n\nexport const LabelItemEditor: React.FC<ItemEditorProps<ItemData>> = (props) => {\n    const {data, setData} = props;\n\n\n    return (\n        <Form>\n            <Form.Group widths='equal'>\n            <Form.Field>\n                <Checkbox toggle checked={data.inverted} label=\"Inverted\" disabled={(data as any).type === 'text'} onChange={(_, d) => setData(({...data, inverted: !!d.checked}))} />\n            </Form.Field>\n            <Form.Field>\n                <Checkbox toggle checked={data.mask} label=\"Mask\" onChange={(_, d) => setData(({...data, mask: !!d.checked}))} />\n            </Form.Field>\n            </Form.Group>\n            <Form.Field>\n\n                <Checkbox toggle checked={data.rotated} disabled label=\"Rotated\" />\n            </Form.Field>\n            <Form.Field>\n\n                <label>Flipped:</label>\n        \n\n                <Form.Group widths='equal'>\n            <Form.Field>\n\n                <Checkbox toggle checked={data.flippedHorizontal} disabled label=\"Horizontal\" />\n                </Form.Field>\n                <Form.Field>\n                <Checkbox toggle checked={data.flippedVertical} disabled label=\"Vertical\" />\n                \n            </Form.Field>\n\n                </Form.Group>\n            </Form.Field>\n\n            <Form.Field>\n                <label>Threshold</label>\n                <Input type=\"range\" min=\"0\" max=\"254\" value={data.threshold ?? 128} onChange={(_, d) => setData(({...data, threshold: parseInt(d.value, 10)}))} />\n            </Form.Field>\n\n        </Form>\n    )\n} \n","\nexport interface WebFontListPayload {\n    kind: 'webfonts#webfontList';\n    items: WebFont[];\n}\nexport interface WebFont {\n    \"kind\": \"webfonts#webfont\",\n    \"family\": string,\n    \"variants\": FontVariant[],\n    \"subsets\": FontSubset[],\n    \"version\": string,\n    \"lastModified\": string,\n    \"files\": Record<FontVariant, string>,\n    category: FontCategory,\n   }\n\n\nexport type FontCategory = 'handwriting' | 'sans-serif' | 'serif' | 'monospace' | 'display';\nexport type FontVariant = \"regular\" | \"italic\" | \"700\" | \"700italic\"\nexport type FontSubset = \"greek\" | \"greek-ext\" | \"cyrillic-ext\" | \"latin-ext\" | \"latin\" | \"cyrillic\"\n\nexport const AllFontCategories: FontCategory[] = ['handwriting', 'sans-serif', 'serif', 'monospace', 'display'];","import { useEffect, useMemo, useState } from \"react\";\nimport { Checkbox, Label, Input, Pagination, Grid, Segment, Table, Header, SemanticCOLORS, SemanticWIDTHSNUMBER, Divider } from \"semantic-ui-react\";\nimport { WebFont, AllFontCategories, WebFontListPayload, FontCategory } from \"../fonts\";\nimport { StateSetter } from \"../types\";\nimport { updateIncluded } from \"../util\";\n\n\nconst categoryColor: Record<FontCategory, SemanticCOLORS> = {\n    handwriting: 'orange',\n    'sans-serif': 'blue', \n    serif: 'pink', \n    monospace: 'violet', \n    display: 'green'\n};\n\nexport const FontsPage: React.FC<{webFonts: WebFont[], setWebFonts: StateSetter<WebFont[]>}> = (props) => {\n    const { webFonts, setWebFonts } = props;\n    \n    const [fonts, setFonts] = useState<WebFont[]>();\n    const [fontsPerPage, setFontsPerPage] = useState(10);\n    const [activePage, setActivePage] = useState(1);\n    const [search, setSearch] = useState(\"\");\n    // const [selected, setSelected] = useState<string[]>([]);\n\n    const selected = useMemo(() => webFonts.map(f => f.family), [webFonts]);\n\n    const [categories, setCategories] = useState(AllFontCategories);\n\n    useEffect(() => {\n        (async ()=> {\n            const response = await fetch('./googlefonts.json', {method: 'GET'});\n            const payload = (await response.json()) as WebFontListPayload;\n            payload.items.forEach(f => {\n                if(!AllFontCategories.includes(f.category)) {\n                    console.warn(`Unknown font category in payload for font \"${f.family}\": \"${f.category}\". It will not be displayed.`);\n                }\n            })\n            setFonts(payload.items);\n        })()\n    }, [])\n\n    const toggleCategory = (category: FontCategory): ((event: any, data: {checked?: boolean}) => void) => (_, {checked}) => updateIncluded(setCategories, category, !!checked);\n\n    // const renderCategoryLabel = (item: DropdownItemProps, index: number) => ({\n    //     color: categoryColor[item.value as FontCategory],\n    //     content: item.text,\n    //     size: 'tiny'\n    // })\n\n    const filteredFonts = useMemo(() => (fonts ?? []).filter(f => \n        !selected.includes(f.family) && \n        categories.includes(f.category) && \n        f.family.toLowerCase().includes(search)\n    ), [fonts, categories, search, selected]);\n    const selectedFonts = useMemo(() => (fonts ?? []).filter(f => selected.includes(f.family)), [fonts, selected]);\n    const fontPages = useMemo(() => Math.ceil(filteredFonts.length / fontsPerPage), [filteredFonts, fontsPerPage]);\n\n    const updateSelected = (font: WebFont, selected: boolean) => setWebFonts(wfs => [...wfs.filter(wf => wf.family !== font.family), ...(selected ? [font] : [])])\n\n    return (\n        <>\n        <Segment attached='top' loading={!fonts}>\n                <div>\n                    <Input type='text' placeholder='Filter fonts...' fluid value={search} onChange={(e) => setSearch(e.target.value.toLowerCase())} />\n                </div>\n                <Divider />\n                <div>\n                    <Grid widths='equal' stretched columns={(AllFontCategories.length + 1) as SemanticWIDTHSNUMBER}>\n                        <Grid.Column width='2' >\n                        <label>Categories: </label>\n\n                        </Grid.Column>\n                    {AllFontCategories.map(category => \n                        <Grid.Column  key={category}>\n                            <Checkbox className=\"capitalized\" label={category} checked={categories.includes(category)} onChange={toggleCategory(category)} />\n                        </Grid.Column>)}\n                    </Grid>\n                </div>\n        \n        </Segment>\n\n            <Table attached compact>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.HeaderCell>Selected:</Table.HeaderCell>\n                        <Table.HeaderCell />\n                    </Table.Row>\n                    {selectedFonts.length > 0 ? (\n                        selectedFonts.map(f => <FontTableRow key={f.family} selected={selected.includes(f.family)} onToggle={(checked) => updateSelected(f, false)} font={f} />)\n                    ): (\n                        <Table.Row>\n                            <Table.Cell />\n                            <Table.Cell />\n\n                            <Table.Cell>No fonts selected</Table.Cell>\n                            <Table.Cell />\n                            <Table.Cell />\n\n                        </Table.Row>\n                        \n                    )}\n                    <Table.Row>\n                        <Table.HeaderCell>{\"Add:\"}</Table.HeaderCell>\n                        <Table.HeaderCell />\n                    </Table.Row>\n                    {fonts && filteredFonts.filter((_, i) => i >= fontsPerPage * (activePage-1) && i < fontsPerPage * activePage).map((f, i) => \n                        <FontTableRow key={f.family} selected={selected.includes(f.family)} onToggle={(checked) => updateSelected(f, true)} font={f} />\n\n                    )}\n                    </Table.Body>\n\n            </Table>\n\n        <Segment attached='bottom'> \n            <Grid>\n                <Grid.Column verticalAlign=\"bottom\" width='13'>\n                    <label>Pages:</label><br />\n                    <Pagination boundaryRange={2} siblingRange={2} activePage={activePage} totalPages={fontPages} onPageChange={(_, d) => setActivePage(d.activePage ? Number(d.activePage) : 1)} />\n                </Grid.Column>\n                <Grid.Column verticalAlign=\"bottom\" width='3'>\n\n                    <Input  fluid labelPosition='right'  type=\"number\" value={fontsPerPage} onChange={(e, d) => setFontsPerPage(e.target.valueAsNumber)}>\n                  \n    <input />\n    <Label className=\"normal-weight\" basic>of <strong>{filteredFonts.length}</strong></Label>\n                        </Input>\n\n                    \n\n                </Grid.Column>\n            </Grid>\n        </Segment>\n        </>\n    )\n}\n\nconst FontTableRow: React.FC<{font: WebFont, selected: boolean, onToggle: ((checked: boolean) => void)}> = ({font, selected, onToggle}) => {\n\n    const {category, family, variants} = font;\n\n    return (\n        <Table.Row>\n                        <Table.Cell width='1'>\n            <Checkbox style={{}} toggle checked={selected} onChange={(_, d) => onToggle(!!d.checked)} />\n            </Table.Cell>\n            <Table.Cell>\n                \n                <Header>\n                    {family}\n                </Header>\n            </Table.Cell>\n\n            <Table.Cell>\n            <FontPreview size='22px' font={font} /> \n            </Table.Cell>\n\n            <Table.Cell>\n\n                    <small title={variants.join(', ')}>{variants.length} variant(s)</small>\n            </Table.Cell>           \n             <Table.Cell>\n            <Label className=\"capitalized\" content={category} size=\"tiny\" color={categoryColor[category]} />\n            </Table.Cell>\n\n\n\n        </Table.Row>\n    )\n}\n\n\nconst FontPreview: React.FC<{font: WebFont, size: string}> = ({font, size}) => {\n\n    useEffect(() => {\n        const fontVariants = font.variants.map(v => {\n            const source = new URL(font.files[v]);\n            source.protocol = document.location.protocol;\n            const fontFace = new FontFace(font.family, `URL(${source})`);\n            console.log(`Loading font \"${font.family}\" (${v}) from ${source}`);\n            fontFace.load().then(ff => {\n                console.log(`Loaded \"${font.family}\" variant: ${v}!`);\n                document.fonts.add(ff);\n            })\n            return fontFace;\n        });\n\n        return () => {\n            fontVariants.forEach(fontFace => {\n                console.log(`Unloading \"${fontFace.family} // ${fontFace.featureSettings} // ${fontFace.style}!`);\n                document.fonts.delete(fontFace);\n            });\n        }\n    }, [font.family, font.variants, font.files]);\n\n    return (\n        <div style={{fontFamily: font.family, fontSize: size}}>Lorem jävla ipsum vafan</div>\n    )\n}","import { FC, useEffect, useMemo, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.scss';\nimport 'semantic-ui-css/semantic.min.css';\nimport { ImageItem, ImageItemEditor, TextItemEditor, TextItem, LabelItemEditor } from './Items';\nimport { ItemData, LabelItemData } from './Items/common';\nimport { Button, Card, Container, Dropdown, Form, Header, Input, Loader, Menu, MenuItem, Popup, Radio, Segment } from 'semantic-ui-react';\nimport { valueOptions } from './util';\nimport { Link, Route } from 'wouter';\nimport { FontsPage } from './Pages/FontsPage';\nimport { WebFont } from './fonts';\n\nconst itemDefaults = { marginTop: 0,  marginBottom: 0,  marginLeft: 0,  marginRight: 0 };\nconst default_items: LabelItemData[] = [\n  { key: 't1', type: 'text', text: 'Hello?', font: '40px sans-serif', ...itemDefaults },\n  { key: 't2', type: 'text', text: 'Text with space', font: '40px sans-serif', ...itemDefaults },\n  { key: 'i1', type: 'image', image: './shoutrrr.png', ...itemDefaults },\n  { key: 't3', type: 'text', text: 'Wow!!', font: '40px sans-serif' , ...itemDefaults},\n]\n\nfunction App() {\n  \n  const [items, setItems] = useState<LabelItemData[]>(default_items);\n  const [error, setError] = useState<{title: string, message?: string} | undefined>();\n  const [webFonts, setWebFonts] = useState<WebFont[]>([]);\n\n  const [background, setBackground] = useState<string>(\"#ffffff\");\n  const [foreground, setForeground] = useState<string>(\"#000000\");\n\n  const labelColor: [number, number, number] = useMemo(() => (c => [(c >> 16) & 0xff, (c >> 8) & 0xff, c & 0xff])(parseInt(foreground.substring(1), 16)), [foreground])\n\n  const [selectedItem, setSelectedItem] = useState<LabelItemData | null>(null);\n\n  const updateItem = (newItem: LabelItemData | ItemData) =>\n    setItems(current => current.map(i => i.key === newItem.key ? newItem : i) as LabelItemData[]);\n  \n\n  \n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Menu>\n          <Link href={`${process.env.PUBLIC_URL}/label`}>\n            <MenuItem content='Label'></MenuItem>\n          </Link>\n          <Link href={`${process.env.PUBLIC_URL}/fonts`}>\n            <MenuItem content='Fonts'></MenuItem>\n          </Link>\n          <Link href={`${process.env.PUBLIC_URL}/printer`}>\n            <MenuItem content='Printer'></MenuItem>\n          </Link>\n        </Menu>\n\n      <Route path={`${process.env.PUBLIC_URL}/printer`}>\n        <ConnectionCard />\n      </Route>\n\n      <Route path={`${process.env.PUBLIC_URL}/fonts`}>\n        <FontsPage webFonts={webFonts} setWebFonts={setWebFonts} />\n      </Route>\n\n      <Route path={`${process.env.PUBLIC_URL}/label`}>\n        <FontLoader webFonts={webFonts} onError={(e: Error) => setError({title: 'Error loading font', message: e?.message})} />\n\n\n\n      <Segment>\n        <Header>Label editor\n          <div style={{float: 'right'}}><label>BG:\n          <input type='color' value={background} onChange={e => setBackground(e.target.value)}></input>\n            </label></div>\n            <div style={{float: 'right'}}><label>FG:\n          <input type='color' value={foreground} onChange={e => setForeground(e.target.value)}></input>\n            </label></div>\n\n        </Header>\n\n      {error && (<dialog><header>{error.title}</header><div>{error.message  ?? 'Unknown error'}</div></dialog>)}\n      <div style={{overflowY: 'visible',overflowX: 'auto', background: '#e9e9e9', padding: '10px', boxShadow: 'inset 1px 1px 4px #00000020' }}>\n      <div style={{display: 'flex', flexDirection: 'row', alignItems: 'flex-start', background: background, width: 'fit-content', boxShadow: '1px 1px 4px #00000020'  }}>\n\n        {items.map(item =>\n        <Popup key={item.key} on='click' position='bottom right' onOpen={() => setSelectedItem(item)} onClose={() => setSelectedItem(null)} trigger={\n          <div className={`label-item${selectedItem?.key === item.key?' selected':''}`}>{/* onClick={() => setSelectedItem(item)} */}\n            <div className='indicator' />\n          {\n            item.type === 'text' ? <TextItem data={item} color={labelColor} /> :\n            item.type === 'image' ? <ImageItem data={item}  color={labelColor} /> :\n            <div>Invalid item</div>\n          }\n            <div className='indicator' />\n          </div>\n        }>\n          <LabelItemEditor data={item} setData={updateItem} />\n          {item.type === 'text' && <TextItemEditor data={item} setData={updateItem} />}\n          {item.type === 'image' && <ImageItemEditor data={item} setData={updateItem} />}\n        </Popup>\n\n        )}\n\n      {/* <LabelPreview />\n      <ImagePreview /> */}\n      <div style={{flex: 'auto', opacity: 0.5, alignSelf: 'stretch', display: 'flex'}}>\n        <Popup on='click' trigger={<Button icon='plus' basic style={{boxShadow: 'none', margin: 0}} size='massive' />}>\n          <AddLabelDialog onAdd={(item) => setItems(items => [...items, item])} />\n        </Popup>\n        \n        </div>\n      </div>\n      </div>\n      </Segment>\n      </Route>\n      {/* <Segment attached='top'>\n        {selectedItem ? (\n          <>\n                      {selectedItem.type === 'text' && <TextItemEditor item={selectedItem} />}\n                      {selectedItem.type === 'image' && <ImageItemEditor item={selectedItem} />}\n          </>\n        ):(\n          <Message content='Select an item to edit' />\n        )}\n      </Segment> */}\n      </Container> \n    </div>\n  );\n}\n\n// {ports.map(port => (\n//   <li key={port.key}><details><summary>{port.key}</summary><pre>{JSON.stringify(port, null, 2)}</pre></details></li>\n// ))}\n\nexport default App;\n\nconst AddLabelDialog: FC<{onAdd: ((data: LabelItemData)=>void)}> = ({onAdd}) => {\n\n  const [type, setType] = useState<'text'|'image'>('text');\n  const [value, setValue] = useState('');\n  \n  const key = useMemo(() => new  Date().getTime().toFixed(0), []);\n\n  const newItemData: LabelItemData = useMemo(()=> type === 'image' \n    ? ({ type, key,  ...itemDefaults,  image: value })\n    : ({ type, key,  ...itemDefaults,  text: value, font: '40px sans-serif' })\n  , [type, value, key]);\n\n  return (\n    <Form onSubmit={() => onAdd(newItemData)} style={{minWidth: '400px'}}>\n      <Form.Group widths='equal'>\n        <Form.Field>\n      <Radio label='Text' checked={type === 'text'} onChange={() => setType('text')} />\n\n        </Form.Field>\n        <Form.Field>\n      <Radio label='Image' checked={type === 'image'} onChange={() => setType('image')} />\n        </Form.Field>\n\n      </Form.Group>\n      <Form.Group widths='equal'>\n        <Form.Field width={12}>\n      <Input type='text' fluid placeholder={type === 'text' ? 'Enter text...' : 'https://...'} value={value} onChange={e => setValue(e.target.value)} />\n      </Form.Field>\n        <Form.Field width={4}>\n      <Button type='submit' content='Add' />\n      </Form.Field>\n      </Form.Group>\n    </Form>\n  )\n}\n\nconst ConnectionCard = () => {\n\n  const { register, handleSubmit, formState: { errors } } = useForm<SerialOptions>();\n  const [currentPort, setCurrentPort] = useState<SerialPort | undefined>();\n  const [error, setError] = useState<{title: string, message?: string} | undefined>();\n\n  useEffect(() => {\n    if(Object.values(errors).every(v => !v)) return;\n    // setError({title: 'Errors', })\n  }, [errors]);\n\n  const onSerialConnect = (e: Event) => {\n    console.log(`Connected!`, e.target)\n  }\n\n  const onSerialDisconnect = (e: Event) => {\n    console.log(`Disconnected!`, e.target)\n  }\n\n  useEffect(() => {\n    if(!currentPort) return;\n    currentPort.addEventListener('connect', onSerialConnect);\n    currentPort.addEventListener('disconnect', onSerialDisconnect);\n    return () => {\n      currentPort.removeEventListener('connect', onSerialConnect);\n      currentPort.removeEventListener('disconnect', onSerialDisconnect);\n    }\n  }, [currentPort])\n  \n  const updatePorts = async () => {\n\n    \n    // const rawPorts = await navigator.serial.getPorts();\n    // console.log(`Got ${rawPorts.length} ports:`, rawPorts)\n    // const newPorts = rawPorts.map(raw => {\n    //   const info = raw.getInfo();\n    //   return {\n    //     ...info,\n    //     key: `${info.vendorId}/${info.productId}`,\n    //     raw,\n    //   }\n    // });\n    // setPorts(newPorts);\n\n    // button.addEventListener('click', () => {\n    //   const usbVendorId = ...;\n    //   navigator.serial.requestPort({ filters: [{ usbVendorId }]}).then((port) => {\n    //     // Connect to `port` or add it to the list of available ports.\n    //   }).catch((e) => {\n    //     // The user didn't select a port.\n    //   });\n    // });\n  }\n\n  const doConnect = async (options: SerialOptions) => {\n    try {\n      const port = await navigator.serial.requestPort(); \n      console.log('Port:', {...port});\n      console.log('Info:', port.getInfo());\n      setCurrentPort(port);\n      await port.open({baudRate: options.baudRate});\n      console.log('Port connected(?)!');\n      console.log('Info:', port.getInfo());\n    } catch (e) {\n      console.error(e);\n      setError({title: `Error connecting web serial`, message: (e as any)?.message });\n    }\n    //console.log('Info:', port.getInfo());\n  }\n\n  return (\n    <Card fluid>\n          <Card.Header style={{padding: '10px'}}>\n      <Button floated='right' color='violet' size='tiny' onClick={() => updatePorts()}>Update Ports</Button>\n          <Header floated='left'>Printer communication</Header>\n\n          </Card.Header>\n          <Card.Content>\n\n      <Form onSubmit={handleSubmit(doConnect)}>\n      <Form.Group widths='equal'>\n        <Form.Field>\n        <label>Baud Rate:</label>\n          <Dropdown selection options={valueOptions('75','110','300','1200','2400','4800','9600','19200','38400','57600','115200')} defaultValue=\"9600\" {...register(\"baudRate\")}>\n            {/* <option value=\"\">(default)</option>\n            {['75','110','300','1200','2400','4800','9600','19200','38400','57600','115200'].map(v => <option key={v}>{v}</option>)} */}\n          </Dropdown>\n        </Form.Field>\n        <Form.Field>\n        <label>\n          Data Bits:\n          </label>\n          <Dropdown selection options={valueOptions('5','6','7','8','9')} defaultValue=\"8\" {...register(\"dataBits\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Flow control:\n        </label>\n          <Dropdown selection options={valueOptions('none', 'hardware')} defaultValue=\"none\" {...register(\"flowControl\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Parity:\n        </label>\n          <Dropdown clearable selection options={valueOptions('none','odd','even','mark','space')} defaultValue=\"\" {...register(\"parity\")} />\n          </Form.Field>\n        <Form.Field>\n        <label>\n          Stop Bits:\n        </label>\n          <Dropdown clearable selection options={valueOptions('1', '1.5', '2')} defaultValue=\"\" {...register(\"stopBits\")} />\n        </Form.Field>\n        </Form.Group>\n\n      <Button type=\"submit\" content=\"Connect\" />\n\n      {error && (<dialog><header>{error.title}</header><div>{error.message  ?? 'Unknown error'}</div></dialog>)}\n\n      </Form>\n            </Card.Content>\n      </Card>\n  )\n}\n\n\n\n\n\nconst FontLoader: React.FC<{webFonts: WebFont[], onError: ((error: Error) => void)}> = ({webFonts, onError}) => {\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n      const fontVariants = webFonts.flatMap(font => font.variants.map(v => {\n          const source = new URL(font.files[v]);\n          source.protocol = document.location.protocol;\n          const fontFace = new FontFace(font.family, `URL(${source})`);\n          console.log(`Loading font \"${font.family}\" (${v}) from ${source}`);\n          return fontFace;\n      }));\n\n      Promise.all(fontVariants.map(async ff => {\n        try {\n          await ff.load();\n          console.log(`Loaded \"${ff.family}\"!`);\n          document.fonts.add(ff);\n        } catch(error) {\n          onError(error as Error);\n        }\n      })).then(() => setLoading(false));\n\n      return () => {\n          fontVariants.forEach(fontFace => {\n              console.log(`Unloading \"${fontFace.family} // ${fontFace.featureSettings} // ${fontFace.style}!`);\n              document.fonts.delete(fontFace);\n          });\n      }\n  }, [webFonts, onError]);\n\n  return (\n      <Loader active={loading} />\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst ModeWrapper = process.env.STRICT_MODE === 'yes' ? React.StrictMode : React.Fragment;\n\nReactDOM.render(\n  <ModeWrapper>\n    <App />\n  </ModeWrapper>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}